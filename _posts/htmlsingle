<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="generator" content="Asciidoctor 0.1.4">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Spring Social Reference</title>
<style>article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block;}audio,canvas,video{display:inline-block;}audio:not([controls]){display:none;height:0;}[hidden]{display:none;}html{background:#fff;color:#000;font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;}body{margin:0;}a:focus{outline:thin dotted;}a:active,a:hover{outline:0;}h1{font-size:2em;margin:0.67em 0;}abbr[title]{border-bottom:1px dotted;}b,strong{font-weight:bold;}dfn{font-style:italic;}hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0;}mark{background:#ff0;color:#000;}code,kbd,pre,samp{font-family:monospace,serif;font-size:1em;}pre{white-space:pre-wrap;}q{quotes:"\201C" "\201D" "\2018" "\2019";}small{font-size:80%;}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline;}sup{top:-0.5em;}sub{bottom:-0.25em;}img{border:0;}svg:not(:root){overflow:hidden;}figure{margin:0;}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em;}legend{border:0;padding:0;}button,input,select,textarea{font-family:inherit;font-size:100%;margin:0;}button,input{line-height:normal;}button,select{text-transform:none;}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer;}button[disabled],html input[disabled]{cursor:default;}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0;}input[type="search"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box;}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none;}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0;}textarea{overflow:auto;vertical-align:top;}table{border-collapse:collapse;border-spacing:0;}*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;}html,body{font-size:100%;}body{background:white;color:#222222;padding:0;margin:0;font-family:"Helvetica Neue","Helvetica",Helvetica,Arial,sans-serif;font-weight:normal;font-style:normal;line-height:1;position:relative;cursor:auto;}a:hover{cursor:pointer;}a:focus{outline:none;}img,object,embed{max-width:100%;height:auto;}object,embed{height:100%;}img{-ms-interpolation-mode:bicubic;}#map_canvas img,#map_canvas embed,#map_canvas object,.map_canvas img,.map_canvas embed,.map_canvas object{max-width:none!important;}.left{float:left!important;}.right{float:right!important;}.text-left{text-align:left!important;}.text-right{text-align:right!important;}.text-center{text-align:center!important;}.text-justify{text-align:justify!important;}.hide{display:none;}.antialiased,body{-webkit-font-smoothing:antialiased;}img{display:inline-block;vertical-align:middle;}textarea{height:auto;min-height:50px;}select{width:100%;}p.lead,.paragraph.lead>p,#preamble>.sectionbody>.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6;}.subheader,#content #toctitle,.admonitionblock td.content>.title,.exampleblock>.title,.imageblock>.title,.videoblock>.title,.listingblock>.title,.literalblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,.sidebarblock>.title,.tableblock>.title,.verseblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title,.tableblock>caption{line-height:1.4;color:#7a2518;font-weight:300;margin-top:0.2em;margin-bottom:0.5em;}div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr;}a{color:#005498;text-decoration:underline;line-height:inherit;}a:hover,a:focus{color:#00467f;}a img{border:none;}p{font-family:inherit;font-weight:normal;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility;}p aside{font-size:0.875em;line-height:1.35;font-style:italic;}h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:Georgia,"URW Bookman L",Helvetica,Arial,sans-serif;font-weight:normal;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:0.5em;line-height:1.2125em;}h1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0;}h1{font-size:2.125em;}h2{font-size:1.6875em;}h3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em;}h4{font-size:1.125em;}h5{font-size:1.125em;}h6{font-size:1em;}hr{border:solid #dddddd;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0;}em,i{font-style:italic;line-height:inherit;}strong,b{font-weight:bold;line-height:inherit;}small{font-size:60%;line-height:inherit;}code{font-family:Consolas,"Liberation Mono",Courier,monospace;font-weight:normal;color:#6d180b;}ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit;}ul,ol{margin-left:1.5em;}ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em;}ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit;}ul.square{list-style-type:square;}ul.circle{list-style-type:circle;}ul.disc{list-style-type:disc;}ul.no-bullet{list-style:none;}ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0;}dl dt{margin-bottom:0.3125em;font-weight:bold;}dl dd{margin-bottom:1.25em;}abbr,acronym{text-transform:uppercase;font-size:90%;color:#222222;border-bottom:1px dotted #dddddd;cursor:help;}abbr{text-transform:none;}blockquote{margin:0 0 1.25em;padding:0.5625em 1.25em 0 1.1875em;border-left:1px solid #dddddd;}blockquote cite{display:block;font-size:inherit;color:#555555;}blockquote cite:before{content:"\2014 \0020";}blockquote cite a,blockquote cite a:visited{color:#555555;}blockquote,blockquote p{line-height:1.6;color:#6f6f6f;}.vcard{display:inline-block;margin:0 0 1.25em 0;border:1px solid #dddddd;padding:0.625em 0.75em;}.vcard li{margin:0;display:block;}.vcard .fn{font-weight:bold;font-size:0.9375em;}.vevent .summary{font-weight:bold;}.vevent abbr{cursor:auto;text-decoration:none;font-weight:bold;border:none;padding:0 0.0625em;}@media only screen and (min-width: 768px) {h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.4;}h1{font-size:2.75em;}h2{font-size:2.3125em;}h3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em;}h4{font-size:1.4375em;}}.print-only{display:none!important;}@media print {*{background:transparent!important;color:#000!important;box-shadow:none!important;text-shadow:none!important;}a,a:visited{text-decoration:underline;}a[href]:after{content:" (" attr(href) ")";}abbr[title]:after{content:" (" attr(title) ")";}.ir a:after,a[href^="javascript:"]:after,a[href^="#"]:after{content:"";}pre,blockquote{border:1px solid #999;page-break-inside:avoid;}thead{display:table-header-group;}tr,img{page-break-inside:avoid;}img{max-width:100%!important;}@page{margin:0.5cm;}p,h2,h3,#toctitle,.sidebarblock>.content>.title{orphans:3;widows:3;}h2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid;}.hide-on-print{display:none!important;}.print-only{display:block!important;}.hide-for-print{display:none!important;}.show-for-print{display:inherit!important;}}table{background:white;margin-bottom:1.25em;border:solid 1px #dddddd;}table thead,table tfoot{background:whitesmoke;font-weight:bold;}table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:0.5em 0.625em 0.625em;font-size:inherit;color:#222222;text-align:left;}table tr th,table tr td{padding:0.5625em 0.625em;font-size:inherit;color:#222222;}table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f9f9f9;}table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6;}.clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:" ";display:table;}.clearfix:after,.float-group:after{clear:both;}*:not(pre)>code{font-size:0.9375em;padding:1px 3px 0;white-space:nowrap;background-color:#f2f2f2;border:1px solid #cccccc;-webkit-border-radius:4px;border-radius:4px;text-shadow:none;}pre,pre>code{line-height:1.4;color:inherit;font-family:Consolas,"Liberation Mono",Courier,monospace;font-weight:normal;}kbd.keyseq{color:#555555;}kbd:not(.keyseq){display:inline-block;color:#222222;font-size:0.75em;line-height:1.4;background-color:#F7F7F7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,0.2),0 0 0 2px white inset;box-shadow:0 1px 0 rgba(0,0,0,0.2),0 0 0 2px white inset;margin:-0.15em 0.15em 0 0.15em;padding:0.2em 0.6em 0.2em 0.5em;vertical-align:middle;white-space:nowrap;}kbd kbd:first-child{margin-left:0;}kbd kbd:last-child{margin-right:0;}.menuseq,.menu{color:#090909;}p a>code:hover{color:#561309;}#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:0.9375em;padding-right:0.9375em;}#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:" ";display:table;}#header:after,#content:after,#footnotes:after,#footer:after{clear:both;}#header{margin-bottom:2.5em;}#header>h1{color:black;font-weight:normal;border-bottom:1px solid #dddddd;margin-bottom:-28px;padding-bottom:32px;}#header span{color:#6f6f6f;}#header #revnumber{text-transform:capitalize;}#header br{display:none;}#header br+span{padding-left:3px;}#header br+span:before{content:"\2013 \0020";}#header br+span.author{padding-left:0;}#header br+span.author:before{content:", ";}#toc{border-bottom:3px double #ebebeb;padding-bottom:1.25em;}#toc>ul{margin-left:0.25em;}#toc ul.sectlevel0>li>a{font-style:italic;}#toc ul.sectlevel0 ul.sectlevel1{margin-left:0;margin-top:0.5em;margin-bottom:0.5em;}#toc ul{list-style-type:none;}#toctitle{color:#7a2518;}@media only screen and (min-width: 1280px) {body.toc2{padding-left:20em;}#toc.toc2{position:fixed;width:20em;left:0;top:0;border-right:1px solid #ebebeb;border-bottom:0;z-index:1000;padding:1em;height:100%;overflow:auto;}#toc.toc2 #toctitle{margin-top:0;}#toc.toc2>ul{font-size:.95em;}#toc.toc2 ul ul{margin-left:0;padding-left:1.25em;}#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:0.5em;margin-bottom:0.5em;}body.toc2.toc-right{padding-left:0;padding-right:20em;}body.toc2.toc-right #toc.toc2{border-right:0;border-left:1px solid #ebebeb;left:auto;right:0;}}#content #toc{border-style:solid;border-width:1px;border-color:#d9d9d9;margin-bottom:1.25em;padding:1.25em;background:#f2f2f2;border-width:0;-webkit-border-radius:4px;border-radius:4px;}#content #toc>:first-child{margin-top:0;}#content #toc>:last-child{margin-bottom:0;}#content #toc a{text-decoration:none;}#content #toctitle{font-weight:bold;font-family:"Helvetica Neue","Helvetica",Helvetica,Arial,sans-serif;font-size:1em;padding-left:0.125em;}#footer{max-width:100%;background-color:#222222;padding:1.25em;}#footer-text{color:#dddddd;line-height:1.44;}.sect1{padding-bottom:1.25em;}.sect1+.sect1{border-top:3px double #ebebeb;}#content h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.content>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolute;width:1em;margin-left:-1em;display:block;text-decoration:none;visibility:hidden;text-align:center;font-weight:normal;}#content h1>a.anchor:before,h2>a.anchor:before,h3>a.anchor:before,#toctitle>a.anchor:before,.sidebarblock>.content>.title>a.anchor:before,h4>a.anchor:before,h5>a.anchor:before,h6>a.anchor:before{content:'\00A7';font-size:.85em;vertical-align:text-top;display:block;margin-top:0.05em;}#content h1:hover>a.anchor,#content h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.anchor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anchor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible;}#content h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.title>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:none;}#content h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.sidebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,h6>a.link:hover{color:#a53221;}.imageblock,.literalblock,.listingblock,.verseblock,.videoblock{margin-bottom:1.25em;}.admonitionblock td.content>.title,.exampleblock>.title,.imageblock>.title,.videoblock>.title,.listingblock>.title,.literalblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,.sidebarblock>.title,.tableblock>.title,.verseblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{text-align:left;font-weight:bold;}.tableblock>caption{text-align:left;font-weight:bold;white-space:nowrap;overflow:visible;max-width:0;}table.tableblock #preamble>.sectionbody>.paragraph:first-of-type p{font-size:inherit;}.admonitionblock>table{border:0;background:none;width:100%;}.admonitionblock>table td.icon{text-align:center;width:80px;}.admonitionblock>table td.icon img{max-width:none;}.admonitionblock>table td.icon .title{font-weight:bold;text-transform:uppercase;}.admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #dddddd;color:#6f6f6f;}.admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0;}.exampleblock>.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:white;-webkit-border-radius:4px;border-radius:4px;}.exampleblock>.content>:first-child{margin-top:0;}.exampleblock>.content>:last-child{margin-bottom:0;}.exampleblock>.content h1,.exampleblock>.content h2,.exampleblock>.content h3,.exampleblock>.content #toctitle,.sidebarblock.exampleblock>.content>.title,.exampleblock>.content h4,.exampleblock>.content h5,.exampleblock>.content h6,.exampleblock>.content p{color:#333333;}.exampleblock>.content h1,.exampleblock>.content h2,.exampleblock>.content h3,.exampleblock>.content #toctitle,.sidebarblock.exampleblock>.content>.title,.exampleblock>.content h4,.exampleblock>.content h5,.exampleblock>.content h6{line-height:1;margin-bottom:0.625em;}.exampleblock>.content h1.subheader,.exampleblock>.content h2.subheader,.exampleblock>.content h3.subheader,.exampleblock>.content .subheader#toctitle,.sidebarblock.exampleblock>.content>.subheader.title,.exampleblock>.content h4.subheader,.exampleblock>.content h5.subheader,.exampleblock>.content h6.subheader{line-height:1.4;}.exampleblock.result>.content{-webkit-box-shadow:0 1px 8px #d9d9d9;box-shadow:0 1px 8px #d9d9d9;}.sidebarblock{border-style:solid;border-width:1px;border-color:#d9d9d9;margin-bottom:1.25em;padding:1.25em;background:#f2f2f2;-webkit-border-radius:4px;border-radius:4px;}.sidebarblock>:first-child{margin-top:0;}.sidebarblock>:last-child{margin-bottom:0;}.sidebarblock h1,.sidebarblock h2,.sidebarblock h3,.sidebarblock #toctitle,.sidebarblock>.content>.title,.sidebarblock h4,.sidebarblock h5,.sidebarblock h6,.sidebarblock p{color:#333333;}.sidebarblock h1,.sidebarblock h2,.sidebarblock h3,.sidebarblock #toctitle,.sidebarblock>.content>.title,.sidebarblock h4,.sidebarblock h5,.sidebarblock h6{line-height:1;margin-bottom:0.625em;}.sidebarblock h1.subheader,.sidebarblock h2.subheader,.sidebarblock h3.subheader,.sidebarblock .subheader#toctitle,.sidebarblock>.content>.subheader.title,.sidebarblock h4.subheader,.sidebarblock h5.subheader,.sidebarblock h6.subheader{line-height:1.4;}.sidebarblock>.content>.title{color:#7a2518;margin-top:0;line-height:1.6;}.exampleblock>.content>:last-child>:last-child,.exampleblock>.content .olist>ol>li:last-child>:last-child,.exampleblock>.content .ulist>ul>li:last-child>:last-child,.exampleblock>.content .qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child>:last-child,.sidebarblock>.content .olist>ol>li:last-child>:last-child,.sidebarblock>.content .ulist>ul>li:last-child>:last-child,.sidebarblock>.content .qlist>ol>li:last-child>:last-child{margin-bottom:0;}.literalblock>.content pre,.listingblock>.content pre{background:none;border-width:1px 0;border-style:dotted;border-color:#bfbfbf;-webkit-border-radius:4px;border-radius:4px;padding:0.75em 0.75em 0.5em 0.75em;word-wrap:break-word;}.literalblock>.content pre.nowrap,.listingblock>.content pre.nowrap{overflow-x:auto;white-space:pre;word-wrap:normal;}.literalblock>.content pre>code,.listingblock>.content pre>code{display:block;}@media only screen {.literalblock>.content pre,.listingblock>.content pre{font-size:0.8em;}}@media only screen and (min-width: 768px) {.literalblock>.content pre,.listingblock>.content pre{font-size:0.9em;}}@media only screen and (min-width: 1280px) {.literalblock>.content pre,.listingblock>.content pre{font-size:1em;}}.listingblock>.content{position:relative;}.listingblock:hover code[class*=" language-"]:before{text-transform:uppercase;font-size:0.9em;color:#999;position:absolute;top:0.375em;right:0.375em;}.listingblock:hover code.asciidoc:before{content:"asciidoc";}.listingblock:hover code.clojure:before{content:"clojure";}.listingblock:hover code.css:before{content:"css";}.listingblock:hover code.groovy:before{content:"groovy";}.listingblock:hover code.html:before{content:"html";}.listingblock:hover code.java:before{content:"java";}.listingblock:hover code.javascript:before{content:"javascript";}.listingblock:hover code.python:before{content:"python";}.listingblock:hover code.ruby:before{content:"ruby";}.listingblock:hover code.scss:before{content:"scss";}.listingblock:hover code.xml:before{content:"xml";}.listingblock:hover code.yaml:before{content:"yaml";}.listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:0.5em;color:#999;}.listingblock.terminal pre .command:not([data-prompt]):before{content:'$';}table.pyhltable{border:0;margin-bottom:0;}table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;}table.pyhltable td.code{padding-left:.75em;padding-right:0;}.highlight.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #dddddd;}.highlight.pygments .lineno{display:inline-block;margin-right:.25em;}table.pyhltable .linenodiv{background-color:transparent!important;padding-right:0!important;}.quoteblock{margin:0 0 1.25em;padding:0.5625em 1.25em 0 1.1875em;border-left:1px solid #dddddd;}.quoteblock blockquote{margin:0 0 1.25em 0;padding:0 0 0.5625em 0;border:0;}.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0;}.quoteblock .attribution{margin-top:-.25em;padding-bottom:0.5625em;font-size:inherit;color:#555555;}.quoteblock .attribution br{display:none;}.quoteblock .attribution cite{display:block;margin-bottom:0.625em;}table thead th,table tfoot th{font-weight:bold;}table.tableblock.grid-all{border-collapse:separate;border-spacing:1px;-webkit-border-radius:4px;border-radius:4px;border-top:1px solid #dddddd;border-bottom:1px solid #dddddd;}table.tableblock.frame-topbot,table.tableblock.frame-none{border-left:0;border-right:0;}table.tableblock.frame-sides,table.tableblock.frame-none{border-top:0;border-bottom:0;}table.tableblock td .paragraph:last-child p,table.tableblock td>p:last-child{margin-bottom:0;}th.tableblock.halign-left,td.tableblock.halign-left{text-align:left;}th.tableblock.halign-right,td.tableblock.halign-right{text-align:right;}th.tableblock.halign-center,td.tableblock.halign-center{text-align:center;}th.tableblock.valign-top,td.tableblock.valign-top{vertical-align:top;}th.tableblock.valign-bottom,td.tableblock.valign-bottom{vertical-align:bottom;}th.tableblock.valign-middle,td.tableblock.valign-middle{vertical-align:middle;}p.tableblock.header{color:#222222;font-weight:bold;}td>div.verse{white-space:pre;}ol{margin-left:1.75em;}ul li ol{margin-left:1.5em;}dl dd{margin-left:1.125em;}dl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0;}ol>li p,ul>li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:0.625em;}ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none;}ul.unstyled,ol.unnumbered,ul.checklist{margin-left:0.625em;}ul.checklist li>p:first-child>i[class^="icon-check"]:first-child,ul.checklist li>p:first-child>input[type="checkbox"]:first-child{margin-right:0.25em;}ul.checklist li>p:first-child>input[type="checkbox"]:first-child{position:relative;top:1px;}ul.inline{margin:0 auto 0.625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden;}ul.inline>li{list-style:none;float:left;margin-left:1.375em;display:block;}ul.inline>li>*{display:block;}.unstyled dl dt{font-weight:normal;font-style:normal;}ol.arabic{list-style-type:decimal;}ol.decimal{list-style-type:decimal-leading-zero;}ol.loweralpha{list-style-type:lower-alpha;}ol.upperalpha{list-style-type:upper-alpha;}ol.lowerroman{list-style-type:lower-roman;}ol.upperroman{list-style-type:upper-roman;}ol.lowergreek{list-style-type:lower-greek;}.hdlist>table,.colist>table{border:0;background:none;}.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none;}td.hdlist1{padding-right:.8em;font-weight:bold;}td.hdlist1,td.hdlist2{vertical-align:top;}.literalblock+.colist,.listingblock+.colist{margin-top:-0.5em;}.colist>table tr>td:first-of-type{padding:0 .8em;line-height:1;}.colist>table tr>td:last-of-type{padding:0.25em 0;}.qanda>ol>li>p>em:only-child{color:#00467f;}.thumb,.th{line-height:0;display:inline-block;border:solid 4px white;-webkit-box-shadow:0 0 0 1px #dddddd;box-shadow:0 0 0 1px #dddddd;}.imageblock.left,.imageblock[style*="float: left"]{margin:0.25em 0.625em 1.25em 0;}.imageblock.right,.imageblock[style*="float: right"]{margin:0.25em 0 1.25em 0.625em;}.imageblock>.title{margin-bottom:0;}.imageblock.thumb,.imageblock.th{border-width:6px;}.imageblock.thumb>.title,.imageblock.th>.title{padding:0 0.125em;}.image.left,.image.right{margin-top:0.25em;margin-bottom:0.25em;display:inline-block;line-height:0;}.image.left{margin-right:0.625em;}.image.right{margin-left:0.625em;}a.image{text-decoration:none;}span.footnote,span.footnoteref{vertical-align:super;font-size:0.875em;}span.footnote a,span.footnoteref a{text-decoration:none;}#footnotes{padding-top:0.75em;padding-bottom:0.75em;margin-bottom:0.625em;}#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0;}#footnotes .footnote{padding:0 0.375em;line-height:1.3;font-size:0.875em;margin-left:1.2em;text-indent:-1.2em;margin-bottom:.2em;}#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none;}#footnotes .footnote:last-of-type{margin-bottom:0;}#content #footnotes{margin-top:-0.625em;margin-bottom:0;padding:0.75em 0;}.gist .file-data>table{border:none;background:#fff;width:100%;margin-bottom:0;}.gist .file-data>table td.line-data{width:99%;}div.unbreakable{page-break-inside:avoid;}.big{font-size:larger;}.small{font-size:smaller;}.underline{text-decoration:underline;}.overline{text-decoration:overline;}.line-through{text-decoration:line-through;}.aqua{color:#00bfbf;}.aqua-background{background-color:#00fafa;}.black{color:black;}.black-background{background-color:black;}.blue{color:#0000bf;}.blue-background{background-color:#0000fa;}.fuchsia{color:#bf00bf;}.fuchsia-background{background-color:#fa00fa;}.gray{color:#606060;}.gray-background{background-color:#7d7d7d;}.green{color:#006000;}.green-background{background-color:#007d00;}.lime{color:#00bf00;}.lime-background{background-color:#00fa00;}.maroon{color:#600000;}.maroon-background{background-color:#7d0000;}.navy{color:#000060;}.navy-background{background-color:#00007d;}.olive{color:#606000;}.olive-background{background-color:#7d7d00;}.purple{color:#600060;}.purple-background{background-color:#7d007d;}.red{color:#bf0000;}.red-background{background-color:#fa0000;}.silver{color:#909090;}.silver-background{background-color:#bcbcbc;}.teal{color:#006060;}.teal-background{background-color:#007d7d;}.white{color:#bfbfbf;}.white-background{background-color:#fafafa;}.yellow{color:#bfbf00;}.yellow-background{background-color:#fafa00;}span.icon>[class^="icon-"],span.icon>[class*=" icon-"]{cursor:default;}.admonitionblock td.icon [class^="icon-"]:before{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,0.5);cursor:default;}.admonitionblock td.icon .icon-note:before{content:"\f05a";color:#005498;color:#003f72;}.admonitionblock td.icon .icon-tip:before{content:"\f0eb";text-shadow:1px 1px 2px rgba(155,155,0,0.8);color:#111;}.admonitionblock td.icon .icon-warning:before{content:"\f071";color:#bf6900;}.admonitionblock td.icon .icon-caution:before{content:"\f06d";color:#bf3400;}.admonitionblock td.icon .icon-important:before{content:"\f06a";color:#bf0000;}.conum{display:inline-block;color:white!important;background-color:#222222;-webkit-border-radius:100px;border-radius:100px;text-align:center;width:20px;height:20px;font-size:12px;font-weight:bold;line-height:20px;font-family:Arial,sans-serif;font-style:normal;position:relative;top:-2px;letter-spacing:-1px;}.conum *{color:white!important;}.conum+b{display:none;}.conum:after{content:attr(data-value);}.conum:not([data-value]):empty{display:none;}.literalblock>.content>pre,.listingblock>.content>pre{-webkit-border-radius:0;border-radius:0;}</style>
<link rel="stylesheet" href="http://cdnjs.cloudflare.com/ajax/libs/font-awesome/3.2.1/css/font-awesome.min.css">
<link rel="stylesheet" href="http://cdnjs.cloudflare.com/ajax/libs/prettify/r298/prettify.min.css">
<script src="http://cdnjs.cloudflare.com/ajax/libs/prettify/r298/prettify.min.js"></script>
<script>document.addEventListener('DOMContentLoaded', prettyPrint)</script>
</head>
<body>
<div id="header">
<h1>Spring Social Reference</h1>
<span id="author" class="author">Craig Walls</span><br><span id="author2" class="author">Keith Donald</span><br><span id="author3" class="author">Roy Clarkson</span><br><span id="author4" class="author">Greg Turnquist</span><br>
<span id="revnumber">version 1.1.4.RELEASE</span>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>The Spring Social project enables your applications to establish
Connections with Software-as-a-Service (SaaS) Providers such as Facebook
and Twitter to invoke APIs on behalf of Users.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="introduction"><a class="anchor" href="#introduction"></a>1. Introduction</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="section_preface"><a class="anchor" href="#section_preface"></a>1.1. Socializing applications</h3>
<div class="paragraph">
<p>The phrase "social networking" often refers to efforts aimed at bringing
people together. In the software world, those efforts take the form of
online social networks such as Facebook, Twitter, and LinkedIn. Over a
billion of this world&#8217;s internet users have flocked to these
services to keep frequent contact with family, friends, and colleagues.</p>
</div>
<div class="paragraph">
<p>Under the surface, however, these services are just software
applications that gather, store, and process information. Just like so
many applications written before, these social networks have users who
sign in and perform some activity offered by the service.</p>
</div>
<div class="paragraph">
<p>What makes these applications a little different than traditional
applications is that the data that they collect represent some facet of
their users' lives. What&#8217;s more, these applications are more than
willing to share that data with other applications, as long as the user
gives permission to do so. This means that although these social
networks are great at bringing people together, as software services
they also excel at bringing applications together.</p>
</div>
<div class="paragraph">
<p>To illustrate, imagine that Paul is a member of an online movie club. A
function of the movie club application is to recommend movies for its
members to watch and to let its members maintain a list of movies that
they have seen and those that they plan to see. When Paul sees a movie,
he signs into the movie club site, checks the movie off of his viewing
list, and indicates if he liked the movie or not. Based on his
responses, the movie club application can tailor future recommendations
for Paul to see.</p>
</div>
<div class="paragraph">
<p>On its own, the movie club provides great value to Paul, as it helps him
choose movies to watch. But Paul is also a Facebook user. And many of
Paul&#8217;s Facebook friends also enjoy a good movie now and then. If Paul
were able to connect his movie club account with his Facebook profile,
the movie club application could offer him a richer experience. Perhaps
when he sees a movie, the application could post a message on his
Facebook wall indicating so. Or when offering suggestions, the movie
club could factor in the movies that his Facebook friends liked.</p>
</div>
<div class="paragraph">
<p>Social integration is a three-way conversation between a service
provider, a service consumer, and a user who holds an account on both
the provider and consumer. All interactions between the consumer and the
service provider are scoped to the context of the user&#8217;s profile on the
service provider.</p>
</div>
<div class="paragraph">
<p>In the narrative above, Facebook is the service provider, the movie club
application is the service consumer, and Paul is the user of both. The
movie club application may interact with Facebook on behalf of Paul,
accessing whatever Facebook data and functionality that Paul permits,
including retrieving Paul&#8217;s friends and posting messages to his wall.</p>
</div>
<div class="paragraph">
<p>From the user&#8217;s perspective, both applications provide some valuable
functionality. But by connecting the user&#8217;s account on the consumer
application with his account on the provider application, the user
brings together two applications that can now offer the user more value
than they could individually.</p>
</div>
<div class="paragraph">
<p>With Spring Social, your application can play the part of the service
consumer, interacting with a service provider on behalf of its users.
The key features of Spring Social are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A "Connect Framework" that handles the core authorization and
connection flow with service providers.</p>
</li>
<li>
<p>A "Connect Controller" that handles the OAuth exchange between a
service provider, consumer, and user in a web application environment.</p>
</li>
<li>
<p>A "Signin Controller" that allows users to authenticate with your
application by signing in with their Provider accounts, such as their
Twitter or Facebook accounts.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In addition, there are a handful of provider-specific modules that
extend Spring Social to enable integration with popular SaaS providers,
including Facebook and Twitter.</p>
</div>
</div>
<div class="sect2">
<h3 id="section_how-to-get"><a class="anchor" href="#section_how-to-get"></a>1.2. Getting Spring Social</h3>
<div class="paragraph">
<p>The core Spring Social project consists of the modules described in <a href="#table_modules">Spring Social Modules</a>.</p>
</div>
<table id="table_modules" class="tableblock frame-all grid-all" style="width:100%; ">
<caption class="title">Table 1. Spring Social Modules</caption>
<colgroup>
<col style="width:50%;">
<col style="width:50%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Name</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">spring-social-core</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Spring Social&#8217;s Connect Framework and OAuth client support.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">spring-social-config</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Java and XML configuration support for Spring Social.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">spring-social-security</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Spring Security integration support.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">spring-social-web</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Spring Social&#8217;s ConnectController which uses the Connect Framework to manage connections in a web application environment.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Which of these modules your application needs will largely depend on
what facets of Spring Social you intend to use.</p>
</div>
<div class="sect3">
<h4 id="gradle"><a class="anchor" href="#gradle"></a>1.2.1. Gradle</h4>
<div class="paragraph">
<p>At very minimum, you&#8217;ll need the core module in your application&#8217;s classpath:</p>
</div>
<div class="listingblock">
<div class="title">build.gradle</div>
<div class="content">
<pre class="prettyprint groovy language-groovy"><code>compile "org.springframework.social:spring-social-core:1.1.4.RELEASE"</code></pre>
</div>
</div>
<div class="paragraph">
<p>To let Spring Social handle the back-and-forth authorization handshake
between your web application and a service provider, you&#8217;ll need the web
module:</p>
</div>
<div class="listingblock">
<div class="title">build.gradle</div>
<div class="content">
<pre class="prettyprint groovy language-groovy"><code>compile "org.springframework.social:spring-social-web:1.1.4.RELEASE"</code></pre>
</div>
</div>
<div class="paragraph">
<p>You&#8217;ll probably want to take advantage of Spring Social&#8217;s simplified configuration
support for XML and/or Java configuration. If so, you&#8217;ll need the config module:</p>
</div>
<div class="listingblock">
<div class="title">build.gradle</div>
<div class="content">
<pre class="prettyprint groovy language-groovy"><code>compile "org.springframework.social:spring-social-config:1.1.4.RELEASE"</code></pre>
</div>
</div>
<div class="paragraph">
<p>If you want to integrate Spring Social with Spring Security to enable users to sign
into your application via Facebook, Twitter, or another provider, you&#8217;ll need the
security module:</p>
</div>
<div class="listingblock">
<div class="title">build.gradle</div>
<div class="content">
<pre class="prettyprint groovy language-groovy"><code>compile "org.springframework.social:spring-social-security:1.1.4.RELEASE"</code></pre>
</div>
</div>
<div class="paragraph">
<p>Final GA releases of Spring Social will be available in the Maven Central repository.
But if you are developing against a milestone or release candidate version,
such as 1.1.0.M1 or 1.1.0.RC1, then you will need to add Spring&#8217;s milestone
repository to your build in order to resolve the artifacts:</p>
</div>
<div class="listingblock">
<div class="title">build.gradle</div>
<div class="content">
<pre class="prettyprint groovy language-groovy"><code>repositories {
  mavenLocal()
  maven { url 'http://maven.springframework.org/milestone' }
  mavenCentral()
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Similarly, if you are trying out the latest nightly build version (e.g.
1.1.0.BUILD-SNAPSHOT), you will need to add Spring&#8217;s snapshot repository:</p>
</div>
<div class="listingblock">
<div class="title">build.gradle</div>
<div class="content">
<pre class="prettyprint groovy language-groovy"><code>repositories {
  mavenLocal()
  maven { url 'http://maven.springframework.org/snapshot' }
  mavenCentral()
}</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="maven"><a class="anchor" href="#maven"></a>1.2.2. Maven</h4>
<div class="paragraph">
<p>At very minimum, you&#8217;ll
need the core module in your application&#8217;s classpath (as a Maven <code>&lt;dependency&gt;</code>):</p>
</div>
<div class="listingblock">
<div class="title">pom.xml</div>
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.social&lt;/groupId&gt;
    &lt;artifactId&gt;spring-social-core&lt;/artifactId&gt;
    &lt;version&gt;1.1.4.RELEASE&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Or, if you&#8217;re using Gradle to build your project:</p>
</div>
<div class="listingblock">
<div class="title">build.gradle</div>
<div class="content">
<pre class="prettyprint groovy language-groovy"><code>compile "org.springframework.social:spring-social-core:1.1.4.RELEASE"</code></pre>
</div>
</div>
<div class="paragraph">
<p>To let Spring Social handle the back-and-forth authorization handshake
between your web application and a service provider, you&#8217;ll need the web
module:</p>
</div>
<div class="listingblock">
<div class="title">pom.xml</div>
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.social&lt;/groupId&gt;
    &lt;artifactId&gt;spring-social-web&lt;/artifactId&gt;
    &lt;version&gt;1.1.4.RELEASE&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>You&#8217;ll probably want to take advantage of Spring Social&#8217;s simplified configuration
support for XML and/or Java configuration. If so, you&#8217;ll need the config module:</p>
</div>
<div class="listingblock">
<div class="title">pom.xml</div>
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.social&lt;/groupId&gt;
    &lt;artifactId&gt;spring-social-config&lt;/artifactId&gt;
    &lt;version&gt;1.1.4.RELEASE&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>If you want to integrate Spring Social with Spring Security to enable users to sign
into your application via Facebook, Twitter, or another provider, you&#8217;ll need the
security module:</p>
</div>
<div class="listingblock">
<div class="title">pom.xml</div>
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.social&lt;/groupId&gt;
    &lt;artifactId&gt;spring-social-security&lt;/artifactId&gt;
    &lt;version&gt;1.1.4.RELEASE&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Final GA releases of Spring Social will be available in the Maven Central repository.
But if you are developing against a milestone or release candidate version,
such as 1.1.0.M1 or 1.1.0.RC1, then you will need to add the following
repository to your build in order to resolve the artifacts:</p>
</div>
<div class="listingblock">
<div class="title">pom.xml</div>
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;repository&gt;
    &lt;id&gt;org.springframework.maven.milestone&lt;/id&gt;
    &lt;name&gt;Spring Maven Milestone Repository&lt;/name&gt;
        &lt;url&gt;http://repo.spring.io/milestone&lt;/url&gt;
&lt;/repository&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Similarly, if you are trying out the latest nightly build version (e.g.
1.1.0.BUILD-SNAPSHOT), you will need to add the following repository:</p>
</div>
<div class="listingblock">
<div class="title">pom.xml</div>
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;repository&gt;
    &lt;id&gt;org.springframework.maven.snapshot&lt;/id&gt;
    &lt;name&gt;Spring Maven Snapshot Repository&lt;/name&gt;
        &lt;url&gt;http://repo.spring.io/snapshot&lt;/url&gt;
&lt;/repository&gt;</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="section_client-modules"><a class="anchor" href="#section_client-modules"></a>1.2.3. Client modules</h4>
<div class="paragraph">
<p>In addition to modules that make up the core Spring Social project,
there are a number of provider-specific client modules that are released
separately that provide connectivity and API bindings to popular SaaS
providers. These client modules are listed in <a href="#table_clientModules">Spring Social Client Modules</a>.</p>
</div>
<table id="table_clientModules" class="tableblock frame-all grid-all" style="width:100%; ">
<caption class="title">Table 2. Spring Social Client Modules</caption>
<colgroup>
<col style="width:33%;">
<col style="width:33%;">
<col style="width:33%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Name</th>
<th class="tableblock halign-left valign-top">Maven group ID</th>
<th class="tableblock halign-left valign-top">Maven artifact ID</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="http://docs.spring.io/spring-social-facebook/site/docs/1.1.0.RC1/reference/htmlsingle/">Spring Social Facebook</a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">org.springframework.social</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">spring-social-facebook</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="http://docs.spring.io/spring-social-twitter/site/docs/1.1.0.RC1/reference/htmlsingle/">Spring Social Twitter</a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">org.springframework.social</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">spring-social-twitter</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="http://docs.spring.io/spring-social-linkedin/site/docs/1.1.0.RC1/reference/htmlsingle/">Spring Social LinkedIn</a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">org.springframework.social</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">spring-social-linkedin</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Spring Social GitHub</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">org.springframework.social</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">spring-social-github</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Spring Social TripIt</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">org.springframework.social</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">spring-social-tripit</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>All of these modules are optional, depending on the connectivity needs
of your application. For instance, if your application will connect with
Facebook, you&#8217;ll want to add the Facebook module to your project.
In Gradle:</p>
</div>
<div class="listingblock">
<div class="title">build.gradle</div>
<div class="content">
<pre class="prettyprint groovy language-groovy"><code>compile "org.springframework.social:spring-social-facebook:1.1.4.RELEASE"</code></pre>
</div>
</div>
<div class="paragraph">
<p>Or in Maven:</p>
</div>
<div class="listingblock">
<div class="title">pom.xml</div>
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.social&lt;/groupId&gt;
    &lt;artifactId&gt;spring-social-facebook&lt;/artifactId&gt;
    &lt;version&gt;1.1.4.RELEASE&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Note that each of the client modules will progress and release on a
different schedule than Spring Social. Consequently, the version numbers
for any given client module may not align with Spring Social or any
other client module.</p>
</div>
<div class="paragraph">
<p>Refer to each client module&#8217;s reference documentation for details on
connectivity and the API binding.</p>
</div>
</div>
<div class="sect3">
<h4 id="section_dependencies"><a class="anchor" href="#section_dependencies"></a>1.2.4. Dependencies</h4>
<div class="paragraph">
<p>Spring Social depends on a few things to run. Most dependencies are
optional and an effort has been made to keep the required dependencies
to a minimum. The project dependencies are described in this section.</p>
</div>
<div class="sect4">
<h5 id="java"><a class="anchor" href="#java"></a>Java</h5>
<div class="paragraph">
<p>Spring Social requires Java 1.6 or greater.</p>
</div>
</div>
<div class="sect4">
<h5 id="java-servlet-api"><a class="anchor" href="#java-servlet-api"></a>Java Servlet API</h5>
<div class="paragraph">
<p>The Spring Social web support requires Java Servlet 2.5 or greater
(Tomcat 6+). We recommend, however, that you use Java Servlet 3.0 or greater.</p>
</div>
</div>
<div class="sect4">
<h5 id="spring-framework"><a class="anchor" href="#spring-framework"></a>Spring Framework</h5>
<div class="paragraph">
<p>Spring Social depends on <code>RestTemplate</code> provided by the core
<a href="http://www.springsource.org/documentation">Spring Framework</a> in the
spring-web module. It requires Spring Framework version 3.1 or above, although
Spring Framework 4.0 is recommended.</p>
</div>
</div>
<div class="sect4">
<h5 id="spring-security-crypto"><a class="anchor" href="#spring-security-crypto"></a>Spring Security Crypto</h5>
<div class="paragraph">
<p>If you&#8217;re not already using Spring Security to secure your application,
you&#8217;ll need to add the standalone crypto module. This is required for
OAuth1 request signing and encrypting credentials when persisting
connection data. If you&#8217;re already using Spring Security, there is
nothing for you to do because the crypto library comes included.</p>
</div>
<div class="listingblock">
<div class="title">pom.xml</div>
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;
    &lt;artifactId&gt;spring-security-crypto&lt;/artifactId&gt;
    &lt;version&gt;3.2.9.RELEASE&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
</div>
</div>
</div>
<div class="sect4">
<h5 id="apache-httpcomponents"><a class="anchor" href="#apache-httpcomponents"></a>Apache HttpComponents</h5>
<div class="paragraph">
<p>Spring Social has an optional dependency on
<a href="http://hc.apache.org/httpcomponents-client-ga">Apache HttpComponents</a>. If
the HttpComponents HttpClient library is present, it will use it as the
HTTP client (which is generally recommended). Otherwise, it will fall
back on standard J2SE facilities.</p>
</div>
<div class="listingblock">
<div class="title">pom.xml</div>
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
    &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
    &lt;version&gt;4.3.6&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Even thought HttpComponents is an optional dependency, we strongly recommend it over the fallback option.</p>
</div>
</div>
<div class="sect4">
<h5 id="jackson-json-processor"><a class="anchor" href="#jackson-json-processor"></a>Jackson JSON Processor</h5>
<div class="paragraph">
<p>Spring Social&#8217;s provider API bindings rely on the
<a href="http://jackson.codehaus.org/">Jackson JSON Processor</a> to map JSON
responses to Java objects. Each binding, such as Facebook or Twitter,
transitively depends on Jackson 2.6.1, so there&#8217;s nothing special to do
to add Jackson to your project&#8217;s Maven or Gradle build.</p>
</div>
</div>
</div>
<div class="sect3">
<h4 id="sample-code"><a class="anchor" href="#sample-code"></a>1.2.5. Sample Code</h4>
<div class="paragraph">
<p>We have created a few sample applications to illustrate the capabilities
of Spring Social. To obtain the
<a href="https://github.com/SpringSource/spring-social-samples">https://github.com/SpringSource/spring-social-samples</a> code, use the
following git command:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint sh language-sh"><code>$ git clone git://github.com/SpringSource/spring-social-samples.git</code></pre>
</div>
</div>
<div class="paragraph">
<p>The Spring Social Samples project includes the following samples:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>spring-social-quickstart - Designed to get you up and running quickly.</p>
</li>
<li>
<p>spring-social-showcase - Illustrates most of Spring Social&#8217;s features.</p>
</li>
<li>
<p>spring-social-showcase-sec - Illustrates most of Spring Social&#8217;s features,
including Spring Security integration.</p>
</li>
<li>
<p>spring-social-movies - Shows how to extend Spring Social to implement
a new <code>ServiceProvider</code> and API binding.</p>
</li>
<li>
<p>spring-social-twitter4j - Shows how to extend Spring Social and re-use
an existing API binding.</p>
</li>
<li>
<p>spring-social-popup - Shows how to use Spring Social to drive a
browser popup-based connection flow.</p>
</li>
<li>
<p>spring-social-canvas - Demonstrates how to use Spring Social within a
Facebook Canvas application.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="connectFramework"><a class="anchor" href="#connectFramework"></a>2. Service Provider <em>Connect</em> Framework</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The <code>spring-social-core</code> module includes a <em>Service Provider Connect Framework</em>
for managing connections to Software-as-a-Service (SaaS)
providers such as Facebook and Twitter. This framework allows your
application to establish connections between local user accounts and
accounts those users have with external service providers. Once a
connection is established, it can be be used to obtain a strongly-typed
Java binding to the ServiceProvider&#8217;s API, giving your application the
ability to invoke the API on behalf of a user.</p>
</div>
<div class="paragraph">
<p>To illustrate, consider Facebook as an example ServiceProvider. Suppose
your application, AcmeApp, allows users to share content with their
Facebook friends. To support this, a connection needs to be established
between a user&#8217;s AcmeApp account and her Facebook account. Once
established, a Facebook instance can be obtained and used to post
content to the user&#8217;s wall. Spring Social&#8217;s <em>Connect</em> framework provides
a clean API for managing service provider connections such as this.</p>
</div>
<div class="sect2">
<h3 id="section_coreApi"><a class="anchor" href="#section_coreApi"></a>2.1. Core API</h3>
<div class="paragraph">
<p>The <code>Connection&lt;A&gt;</code> interface models a connection to an external service
provider such as Facebook:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public interface Connection&lt;A&gt; extends Serializable {

    ConnectionKey getKey();

    String getDisplayName();

    String getProfileUrl();

    String getImageUrl();

    void sync();

    boolean test();

    boolean hasExpired();

    void refresh();

    UserProfile fetchUserProfile();

    void updateStatus(String message);

    A getApi();

    ConnectionData createData();

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Each <code>Connection</code> is uniquely identified by a composite key consisting of
a <code>providerId</code> (e.g. <em>facebook</em>) and connected <code>providerUserId</code> (e.g.
<em>738140579</em>, for Craig Walls' Facebook ID). This key tells you what
provider user the connection is connected to.</p>
</div>
<div class="paragraph">
<p>A <code>Connection</code> has a number of meta-properties that can be used to render
it on a screen, including a <code>displayName</code>, <code>profileUrl</code>, and <code>imageUrl</code>. As an
example, the following HTML template snippet could be used to generate a
link to the connected user&#8217;s profile on the provider&#8217;s site:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;img src="${connection.imageUrl}" /&gt; &lt;a href="${connection.profileUrl}"&gt;${connection.displayName}&lt;/a&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>The value of these properties may depend on the state of the provider
user&#8217;s profile. In this case, <code>sync()</code> can be called to synchronize these
values if the user&#8217;s profile is updated.</p>
</div>
<div class="paragraph">
<p>A <code>Connection</code> can be tested to determine if its authorization credentials
are valid. If invalid, the connection may have expired or been revoked
by the provider. If the connection has expired, a connection may be
refreshed to renew its authorization credentials.</p>
</div>
<div class="paragraph">
<p>A <code>Connection</code> provides several operations that allow the client
application to invoke the <code>ServiceProvider</code>'s API in a uniform way. This
includes the ability to fetch a model of the user&#8217;s profile and update
the user&#8217;s status in the provider&#8217;s system.</p>
</div>
<div class="paragraph">
<p>A <code>Connection</code>'s parameterized type <code>&lt;A&gt;</code> represents the Java binding to the
<code>ServiceProvider</code>'s native API. An instance of this API binding can be
obtained by calling <code>getApi()</code>. As an example, a Facebook connection
instance would be parameterized as <code>Connection&lt;Facebook&gt;</code>. <code>getApi()</code>
would return a <code>Facebook</code> instance that provides a Java binding to
Facebook&#8217;s graph API for a specific Facebook user.</p>
</div>
<div class="paragraph">
<p>Finally, the internal state of a connection can be captured for transfer
between layers of your application by calling <code>createData()</code>. This could
be used to persist the connection in a database, or serialize it over
the network.</p>
</div>
<div class="paragraph">
<p>To put this model into action, suppose we have a reference to a
<code>Connection&lt;Twitter&gt;</code> instance. Suppose the connected user is the Twitter
user with screen name <em>jbauer</em>.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>Connection#getKey()</code> would return (<em>twitter</em>, <em>14710604</em>) where
<em>14710604</em> is @jbauer&#8217;s Twitter-assigned user id that never changes.</p>
</li>
<li>
<p><code>Connection#getDisplayName()</code> would return <em>@jbauer</em>.</p>
</li>
<li>
<p><code>Connection#getProfileUrl()</code> would return
<em><a href="http://twitter.com/jbauer">http://twitter.com/jbauer</a></em>.</p>
</li>
<li>
<p><code>Connection#getImageUrl()</code> would return
<em><a href="http://a0.twimg.com/profile_images/105951287/IMG_5863_2_normal.jpg">http://a0.twimg.com/profile_images/105951287/IMG_5863_2_normal.jpg</a></em>.</p>
</li>
<li>
<p><code>Connection#sync()</code> would synchronize the state of the connection with
@jbauer&#8217;s profile.</p>
</li>
<li>
<p><code>Connection#test()</code> would return <code>true</code> indicating the authorization
credentials associated with the Twitter connection are valid. This
assumes Twitter has not revoked the AcmeApp client application, and
@jbauer has not reset his authorization credentials (Twitter
connections do not expire).</p>
</li>
<li>
<p><code>Connection#hasExpired()</code> would return <code>false</code>.</p>
</li>
<li>
<p><code>Connection#refresh()</code> would not do anything since connections to
Twitter do not expire.</p>
</li>
<li>
<p><code>Connection#fetchUserProfile()</code> would make a remote API call to
Twitter to get @jbauer&#8217;s profile data and normalize it into a
<code>UserProfile</code> model.</p>
</li>
<li>
<p><code>Connection#updateStatus(String)</code> would post a status update to
@jbauer&#8217;s timeline.</p>
</li>
<li>
<p><code>Connection#getApi()</code> would return a Twitter giving the client
application access to the full capabilities of Twitter&#8217;s native API.</p>
</li>
<li>
<p><code>Connection#createData()</code> would return <code>ConnectionData</code> that could be
serialized and used to restore the connection at a later time.</p>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="section_establishingConnections"><a class="anchor" href="#section_establishingConnections"></a>2.2. Establishing connections</h3>
<div class="paragraph">
<p>So far we have discussed how existing connections are modeled, but we
have not yet discussed how new connections are established. The manner
in which connections between local users and provider users are
established varies based on the authorization protocol used by the
<code>ServiceProvider</code>. Some service providers use OAuth, others use HTTP Basic
Auth, others may use something else. Spring Social currently provides
native support for OAuth-based service providers, including support for
OAuth 1 and OAuth 2. This covers the leading social networks, such as
Facebook and Twitter, all of which use OAuth to secure their APIs.
Support for other authorization protocols can be added by extending the
framework.</p>
</div>
<div class="paragraph">
<p>Each authorization protocol is treated as an implementation detail where
protocol-specifics are kept out of the core Connection API. A
<code>ConnectionFactory</code> abstraction encapsulates the construction of
connections that use a specific authorization protocol. In the following
sections, we will discuss the major <code>ConnectionFactory</code> classes provided
by the framework. Each section will also describe the protocol-specific
flow required to establish a new connection.</p>
</div>
<div class="sect3">
<h4 id="section_oauth2ServiceProviders"><a class="anchor" href="#section_oauth2ServiceProviders"></a>2.2.1. OAuth2 service providers</h4>
<div class="paragraph">
<p>OAuth 2 is rapidly becoming a preferred authorization protocol, and is
used by major service providers such as Facebook, Github, Foursquare,
and Google. In Spring Social, an <code>OAuth2ConnectionFactory</code> is used to
establish connections with a OAuth2-based service provider:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public class OAuth2ConnectionFactory&lt;A&gt; extends ConnectionFactory&lt;A&gt; {

    public OAuth2Operations getOAuthOperations();

    public Connection&lt;A&gt; createConnection(AccessGrant accessGrant);

    public Connection&lt;A&gt; createConnection(ConnectionData data);

    public void setScope(String scope);

    public String getScope();

    public String generateState();

    public boolean supportsStateParameter();

}</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>getOAuthOperations()</code> returns an API to use to conduct the authorization
flow, or "OAuth Dance", with a service provider. The result of this flow
is an <code>AccessGrant</code> that can be used to establish a connection with a
local user account by calling <code>createConnection()</code>. The <code>OAuth2Operations</code>
interface is shown below:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public interface OAuth2Operations {

    String buildAuthorizeUrl(OAuth2Parameters parameters);

    String buildAuthorizeUrl(GrantType grantType, OAuth2Parameters parameters);

    String buildAuthenticateUrl(OAuth2Parameters parameters);

    String buildAuthenticateUrl(GrantType grantType, OAuth2Parameters parameters);

    AccessGrant exchangeForAccess(String authorizationCode, String redirectUri,
        MultiValueMap&lt;String, String&gt; additionalParameters);

    AccessGrant exchangeCredentialsForAccess(String username, String password,
        MultiValueMap&lt;String, String&gt; additionalParameters);

    AccessGrant refreshAccess(String refreshToken,
        MultiValueMap&lt;String, String&gt; additionalParameters);

    AccessGrant authenticateClient();

    AccessGrant authenticateClient(String scope);

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Callers are first expected to call <code>buildAuthorizeUrl(GrantType, OAuth2Parameters)</code>
to construct the URL to redirect the user to for
connection authorization. Upon user authorization, the authorization code
returned by the provider should be exchanged for an <code>AccessGrant</code>. The
<code>AccessGrant</code> should then used to create a connection. This flow is
illustrated below:</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="resources/images/oauth2_flow.png" alt="image"></span></p>
</div>
<div class="paragraph">
<p>As you can see, there is a back-and-forth conversation that takes place
between the application and the service provider to grant the
application access to the provider account. This exchange, commonly
known as the "OAuth Dance", follows these steps:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>The flow starts by the application redirecting the user to the
provider&#8217;s authorization URL. Here the provider displays a web page
asking the user if he or she wishes to grant the application access to
read and update their data.</p>
</li>
<li>
<p>The user agrees to grant the application access.</p>
</li>
<li>
<p>The service provider redirects the user back to the application (via
the redirect URI), passing an authorization code as a parameter.</p>
</li>
<li>
<p>The application exchanges the authorization code for an access
grant.</p>
</li>
<li>
<p>The service provider issues the access grant to the application. The
grant includes an access token and a refresh token. One receipt of these
tokens, the "OAuth dance" is complete.</p>
</li>
<li>
<p>The application uses the <code>AccessGrant</code> to establish a connection
between the local user account and the external provider account. With
the connection established, the application can now obtain a reference
to the Service API and invoke the provider on behalf of the user.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>The example code below shows use of a <code>FacebookConnectionFactory</code> to
create a connection to Facebook using the OAuth2 server-side flow
illustrated above. Here, <code>FacebookConnectionFactory</code> is a subclass of
<code>OAuth2ConnectionFactory</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>FacebookConnectionFactory connectionFactory =
    new FacebookConnectionFactory("clientId", "clientSecret");
OAuth2Operations oauthOperations = connectionFactory.getOAuthOperations();
OAuth2Parameters params = new OAuth2Parameters();
params.setRedirectUri("https://my-callback-url");
String authorizeUrl = oauthOperations.buildAuthorizeUrl(params);
response.sendRedirect(authorizeUrl);

// upon receiving the callback from the provider:
AccessGrant accessGrant = oauthOperations.exchangeForAccess(authorizationCode, "https://my-callback-url", null);
Connection&lt;Facebook&gt; connection = connectionFactory.createConnection(accessGrant);</code></pre>
</div>
</div>
<div class="paragraph">
<p>The following example illustrates the client-side "implicit"
authorization flow also supported by OAuth2. The difference between this
flow and the server-side "authorization code" flow above is the provider
callback directly contains the access grant (no additional exchange is
necessary). This flow is appropriate for clients incapable of keeping
the access grant credentials confidential, such as a mobile device or
JavaScript-based user agent.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>FacebookConnectionFactory connectionFactory =
    new FacebookConnectionFactory("clientId", "clientSecret");
OAuth2Operations oauthOperations = connectionFactory.getOAuthOperations();
OAuth2Parameters params = new OAuth2Parameters();
params.setRedirectUri("https://my-callback-url");
String authorizeUrl = oauthOperations.buildAuthorizeUrl(GrantType.IMPLICIT_GRANT, params);
response.sendRedirect(authorizeUrl);

// upon receiving the callback from the provider:
AccessGrant accessGrant = new AccessGrant(accessToken);
Connection&lt;Facebook&gt; connection = connectionFactory.createConnection(accessGrant);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="section_oauth1ServiceProviders"><a class="anchor" href="#section_oauth1ServiceProviders"></a>2.2.2. OAuth1 service providers</h4>
<div class="paragraph">
<p>OAuth 1 is the previous version of the OAuth protocol. It is more
complex OAuth 2, and sufficiently different that it is supported
separately. Twitter, Linked In, and TripIt are some of the well-known
ServiceProviders that use OAuth 1. In Spring Social, the
<code>OAuth1ConnectionFactory</code> allows you to create connections to a
OAuth1-based Service Provider:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public class OAuth1ConnectionFactory&lt;A&gt; extends ConnectionFactory&lt;A&gt; {

    public OAuth1Operations getOAuthOperations();

    public Connection&lt;A&gt; createConnection(OAuthToken accessToken);

    public Connection&lt;A&gt; createConnection(ConnectionData data);

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Like a OAuth2-based provider, <code>getOAuthOperations()</code> returns an API to use
to conduct the authorization flow, or "OAuth Dance". The result of the
OAuth 1 flow is an <code>OAuthToken</code> that can be used to establish a connection
with a local user account by calling <code>createConnection()</code>. The
<code>OAuth1Operations</code> interface is shown below:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public interface OAuth1Operations {

    OAuth1Version getVersion();

    OAuthToken fetchRequestToken(String callbackUrl,
        MultiValueMap&lt;String, String&gt; additionalParameters);

    String buildAuthorizeUrl(String requestToken, OAuth1Parameters parameters);

    String buildAuthenticateUrl(String requestToken, OAuth1Parameters parameters);

    OAuthToken exchangeForAccessToken(AuthorizedRequestToken requestToken,
        MultiValueMap&lt;String, String&gt; additionalParameters);

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Callers are first expected to call <code>fetchNewRequestToken(String)</code> to
obtain a temporary token from the service provider to use during the
authorization session. Next, callers should call
<code>buildAuthorizeUrl(String, OAuth1Parameters)</code> to construct the URL to
redirect the user to for connection authorization. Upon user
authorization, the authorized request token returned by the provider
should be exchanged for an access token. The access token should then
used to create a connection. This flow is illustrated below:</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="resources/images/oauth1_flow.png" alt="image"></span></p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>The flow starts with the application asking for a request token. The
purpose of the request token is to obtain user approval and it can only
be used to obtain an access token. In OAuth 1.0a, the consumer callback
URL is passed to the provider when asking for a request token.</p>
</li>
<li>
<p>The service provider issues a request token to the consumer.</p>
</li>
<li>
<p>The application redirects the user to the provider&#8217;s authorization
page, passing the request token as a parameter. In OAuth 1.0, the
callback URL is also passed as a parameter in this step.</p>
</li>
<li>
<p>The service provider prompts the user to authorize the consumer
application and the user agrees.</p>
</li>
<li>
<p>The service provider redirects the user&#8217;s browser back to the
application (via the callback URL). In OAuth 1.0a, this redirect
includes a verifier code as a parameter. At this point, the request
token is authorized.</p>
</li>
<li>
<p>The application exchanges the authorized request token (including
the verifier in OAuth 1.0a) for an access token.</p>
</li>
<li>
<p>The service provider issues an access token to the consumer. The
"dance" is now complete.</p>
</li>
<li>
<p>The application uses the access token to establish a connection
between the local user account and the external provider account. With
the connection established, the application can now obtain a reference
to the Service API and invoke the provider on behalf of the user.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>The example code below shows use of a <code>TwitterConnectionFactory</code> to create
a connection to Twitter using the OAuth1 server-side flow illustrated
above. Here, <code>TwitterConnectionFactory</code> is a subclass of
<code>OAuth1ConnectionFactory</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>TwitterConnectionFactory connectionFactory =
    new TwitterConnectionFactory("consumerKey", "consumerSecret");
OAuth1Operations oauthOperations = connectionFactory.getOAuthOperations();
OAuthToken requestToken = oauthOperations.fetchRequestToken("https://my-callback-url", null);
String authorizeUrl = oauthOperations.buildAuthorizeUrl(requestToken, OAuth1Parameters.NONE);
response.sendRedirect(authorizeUrl);

// upon receiving the callback from the provider:
OAuthToken accessToken = oauthOperations.exchangeForAccessToken(
    new AuthorizedRequestToken(requestToken, oauthVerifier), null);
Connection&lt;Twitter&gt; connection = connectionFactory.createConnection(accessToken);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="section_registeringConnectionFactories"><a class="anchor" href="#section_registeringConnectionFactories"></a>2.2.3. Registering ConnectionFactory instances</h4>
<div class="paragraph">
<p>As you will see in subsequent sections of this reference guide, Spring
Social provides infrastructure for establishing connections to one or
more providers in a dynamic, self-service manner. For example, one
client application may allow users to connect to Facebook, Twitter, and
LinkedIn. Another might integrate Github and Pivotal Tracker.
In Java configuration, you can configure connection factories by overriding <code>SocialConfigurer</code>'s
<code>addConnectionFactories()</code> method:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>@Override
public void addConnectionFactories(ConnectionFactoryConfigurer cfConfig, Environment env) {
	cfConfig.addConnectionFactory(new TwitterConnectionFactory("clientId", "clientSecret"));
	cfConfig.addConnectionFactory(new TwitterConnectionFactory("consumerKey", "consumerSecret"));
	cfConfig.addConnectionFactory(new LinkedInConnectionFactory("consumerKey", "consumerSecret"));
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>This creates a registry of connection factories that other objects can use
to lookup connection factories dynamically.
The connection factory registry implements the <code>ConnectionFactoryLocator</code> interface:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public interface ConnectionFactoryLocator {

    ConnectionFactory&lt;?&gt; getConnectionFactory(String providerId);

    &lt;A&gt; ConnectionFactory&lt;A&gt; getConnectionFactory(Class&lt;A&gt; apiType);

    Set&lt;String&gt; registeredProviderIds();

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Example usage of a <code>ConnectionFactoryLocator</code> is shown below:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>// generic lookup by providerId
ConnectionFactory&lt;?&gt; connectionFactory = locator.getConnectionFactory("facebook");

// typed lookup by service api type
ConnectionFactory&lt;Facebook&gt; connectionFactory = locator.getConnectionFactory(Facebook.class);</code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="section_persistingConnections"><a class="anchor" href="#section_persistingConnections"></a>2.3. Persisting connections</h3>
<div class="paragraph">
<p>After a connection has been established, you may wish to persist it for
later use. This makes things convenient for the user since a connection
can simply be restored from its persistent form and does not need to be
established again. Spring Social provides a <code>ConnectionRepository</code>
interface for managing the persistence of a user&#8217;s connections:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public interface ConnectionRepository {

    MultiValueMap&lt;String, Connection&lt;?&gt;&gt; findAllConnections();

    List&lt;Connection&lt;?&gt;&gt; findConnections(String providerId);

    &lt;A&gt; List&lt;Connection&lt;A&gt;&gt; findConnections(Class&lt;A&gt; apiType);

    MultiValueMap&lt;String, Connection&lt;?&gt;&gt; findConnectionsToUsers(
        MultiValueMap&lt;String, String&gt; providerUserIds);

    Connection&lt;?&gt; getConnection(ConnectionKey connectionKey);

    &lt;A&gt; Connection&lt;A&gt; getConnection(Class&lt;A&gt; apiType, String providerUserId);

    &lt;A&gt; Connection&lt;A&gt; getPrimaryConnection(Class&lt;A&gt; apiType);

    &lt;A&gt; Connection&lt;A&gt; findPrimaryConnection(Class&lt;A&gt; apiType);

    void addConnection(Connection&lt;?&gt; connection);

    void updateConnection(Connection&lt;?&gt; connection);

    void removeConnections(String providerId);

    void removeConnection(ConnectionKey connectionKey);

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>As you can see, this interface provides a number of operations for
adding, updating, removing, and finding <code>Connection`s. Consult the JavaDoc
API of this interface for a full description of these operations. Note
that all operations on this repository are scoped relative to the
"current user" that has authenticated with your local application. For
standalone, desktop, or mobile environments that only have one user this
distinction isn't important. In a multi-user web application
environment, this implies `ConnectionRepository</code> instances will be
request-scoped.</p>
</div>
<div class="paragraph">
<p>For multi-user environments, Spring Social provides a
<code>UsersConnectionRepository</code> that provides access to the global store of
connections across all users:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public interface UsersConnectionRepository {

    List&lt;String&gt; findUserIdsWithConnection(Connection&lt;?&gt; connection);

    Set&lt;String&gt; findUserIdsConnectedTo(String providerId, Set&lt;String&gt; providerUserIds);

    ConnectionRepository createConnectionRepository(String userId);

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>As you can see, this repository acts as a factory for
<code>ConnectionRepository</code> instances scoped to a single user, as well as
exposes a couple of multi-user operations. These operations include the
ability to lookup the local userIds associated with connections to
support provider user sign-in and "registered friends" scenarios.
Consult the JavaDoc API of this interface for a full description.</p>
</div>
<div class="sect3">
<h4 id="section_jdbcConnectionFactory"><a class="anchor" href="#section_jdbcConnectionFactory"></a>2.3.1. JDBC-based persistence</h4>
<div class="paragraph">
<p>Spring Social provides a <code>JdbcUsersConnectionRepository</code> implementation
capable of persisting connections to a RDBMS. The database schema
designed to back this repository is defined as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint sql language-sql"><code>create table UserConnection (userId varchar(255) not null,
    providerId varchar(255) not null,
    providerUserId varchar(255),
    rank int not null,
    displayName varchar(255),
    profileUrl varchar(512),
    imageUrl varchar(512),
    accessToken varchar(512) not null,
    secret varchar(512),
    refreshToken varchar(512),
    expireTime bigint,
    primary key (userId, providerId, providerUserId));
create unique index UserConnectionRank on UserConnection(userId, providerId, rank);</code></pre>
</div>
</div>
<div class="paragraph">
<p>For convenience in bootstrapping the schema from a running application,
this schema definition is available in the <code>spring-social-core</code> module
as a resource at the path
/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.sql.
Note that although this schema was designed with compatibility in mind,
it may not be compatible with all databases. You may need to adapt this
schema definition to accommodate any peculiarities of your chosen
database.</p>
</div>
<div class="paragraph">
<p>The implementation also provides support for encrypting authorization
credentials so they are not stored in plain-text.</p>
</div>
<div class="paragraph">
<p>The example code below demonstrates construction and usage of a
<code>JdbcUsersConnectionRepository</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>// JDBC DataSource pointing to the DB where connection data is stored
DataSource dataSource = ...;

// locator for factories needed to construct Connections when restoring from persistent form
ConnectionFactoryLocator connectionFactoryLocator = ...;

// encryptor of connection authorization credentials
TextEncryptor encryptor = ...;

UsersConnectionRepository usersConnectionRepository =
    new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator, encryptor);

// create a connection repository for the single-user 'jbauer'
ConnectionRepository repository = usersConnectionRepository.createConnectionRepository("jbauer");

// find jbauer's primary Facebook connection
Connection&lt;Facebook&gt; connection = repository.findPrimaryConnection(Facebook.class);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="section_inMemoryConnectionFactory"><a class="anchor" href="#section_inMemoryConnectionFactory"></a>2.3.2. Persisting connections in memory</h4>
<div class="paragraph">
<p>As a convenient alternative to <code>JdbcUsersConnectionRepository</code> and <code>JdbcConnectionRepository</code>,
Spring Social also provides <code>InMemoryUsersConnectionRepository</code> and <code>InMemoryConnectionRepository</code>.
These in-memory repositories are useful for development-time and testing, but aren&#8217;t recommended for
production use.</p>
</div>
<div class="paragraph">
<p>The example code below demonstrates construction and usage of an <code>InMemoryUsersConnectionRepository</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>// locator for factories needed to construct Connections when restoring from persistent form
ConnectionFactoryLocator connectionFactoryLocator = ...;

UsersConnectionRepository usersConnectionRepository =
    new InMemoryUsersConnectionRepository(connectionFactoryLocator);

// create a connection repository for the single-user 'jbauer'
ConnectionRepository repository = usersConnectionRepository.createConnectionRepository("jbauer");

// find jbauer's primary Facebook connection
Connection&lt;Facebook&gt; connection = repository.findPrimaryConnection(Facebook.class);</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="connecting"><a class="anchor" href="#connecting"></a>3. Connecting to Service Providers</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In <a href="#connectFramework">Service Provider <em>Connect</em> Framework</a>, you learned how Spring Social&#8217;s <em>Service Provider <em>Connect</em>
Framework</em> can be used to manage user connections that link your
application&#8217;s user accounts with accounts on external service providers.
In this chapter, you&#8217;ll learn how to control the connect flow in a web
application environment.</p>
</div>
<div class="paragraph">
<p>Spring Social&#8217;s <code>spring-social-web</code> module includes <code>ConnectController</code>, a
Spring MVC controller that coordinates the connection flow between an
application and service providers. <code>ConnectController</code> takes care of
redirecting the user to the service provider for authorization and
responding to the callback after authorization.</p>
</div>
<div class="sect2">
<h3 id="configuring-connectcontroller"><a class="anchor" href="#configuring-connectcontroller"></a>3.1. Configuring ConnectController</h3>
<div class="paragraph">
<p>As <code>ConnectController</code> directs the overall connection flow, it depends on
several other objects to do its job. Before getting into those, first
we&#8217;ll define a single Java <code>@Configuration</code> class where the various Spring
Social objects, including <code>ConnectController</code>, will be configured:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>@Configuration
@EnableSocial
public class SocialConfig implements SocialConfigurer {
  ...
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>ConnectController</code> delegates to one or more <code>ConnectionFactory</code> instances to establish connections to providers on behalf of users.
Once a connection has been established, it delegates to a <code>ConnectionRepository</code> to persist user connection data.
Therefore, we&#8217;ll also need to configure one or more <code>ConnectionFactory`s and a `ConnectionRepository</code>.</p>
</div>
<div class="paragraph">
<p>Each of the Spring Social provider modules includes a <code>ConnectionFactory</code> implementation:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>org.springframework.social.twitter.connect.TwitterConnectionFactory</p>
</li>
<li>
<p>org.springframework.social.facebook.connect.FacebookConnectionFactory</p>
</li>
<li>
<p>org.springframework.social.linkedin.connect.LinkedInConnectionFactory</p>
</li>
<li>
<p>org.springframework.social.tripit.connect.TripItConnectionFactory</p>
</li>
<li>
<p>org.springframework.social.github.connect.GitHubConnectionFactory</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>To register one or more <code>ConnectionFactory</code> objects, override the <code>addConnectionFactories()</code> method from <code>SocialConfigurer</code> as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>@Configuration
public class SocialConfig implements SocialConfigurer {

    @Override
    public void addConnectionFactories(ConnectionFactoryConfigurer cfConfig, Environment env) {
        cfConfig.addConnectionFactory(new TwitterConnectionFactory(
            env.getProperty("twitter.consumerKey"),
            env.getProperty("twitter.consumerSecret")));
        cfConfig.addConnectionFactory(new FacebookConnectionFactory(
            env.getProperty("facebook.clientId"),
            env.getProperty("facebook.clientSecret")));
        cfConfig.addConnectionFactory(new LinkedInConnectionFactory(
            env.getProperty("linkedin.consumerKey"),
            env.getProperty("linkedin.consumerSecret")));
    }

    ...
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Here, three connection factories, one each for Facebook, Twitter, and LinkedIn, have been registered.
If you would like to support other providers, simply register their connection factories here.
Because client ids and secrets may be different across environments (e.g., test, production, etc), we recommend you externalize these values.</p>
</div>
<div class="paragraph">
<p>As discussed in <a href="#section_persistingConnections">Persisting connections</a>, <code>ConnectionRepository</code> defines operations for persisting and restoring connections for a specific user.
Therefore, when configuring a <code>ConnectionRepository</code> bean for use by <code>ConnectController</code>, it must be scoped such that it can be created on a per-user basis.</p>
</div>
<div class="paragraph">
<p>But rather than configure a <code>ConnectionRepository</code> bean directly and worry about remembering to scope it to request scope, all we must do is configure the <code>UsersConnectionRepository</code> bean by implementing <code>getUsersConnectionRepository()</code> from <code>SocialConfigurer</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>@Autowired
DataSource dataSource;

@Override
public UsersConnectionRepository getUsersConnectionRepository(ConnectionFactoryLocator connectionFactoryLocator) {
    return new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator, Encryptors.noOpText());
}

@Override
public UserIdSource getUserIdSource() {
    return new AuthenticationNameUserIdSource();
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>JdbcUsersConnectionRepository</code> object is instantiated with a reference to a <code>DataSource</code> (which is configured elsewhere and autowired into this configuration class), the given <code>ConnectionFactoryLocator</code>, and a text encryptor.
The text encryptor is any implementation of the <code>TextEncryptor</code> interface from Spring Security&#8217;s crypto module.
It will be used to encrypt access tokens and secrets when they are stored in the database.
In this case, a no-op text encryptor is used, but we recommend that you select a stronger encryptor for production applications.</p>
</div>
<div class="paragraph">
<p>Internally, Spring Social&#8217;s configuration support will use the <code>UsersConnectionRepository</code> to create a request-scoped <code>ConnectionRepository</code> bean.
In doing so, it must identify the current user.
Therefore, we must also override the <code>getUserIdSource()</code> to return an instance of a <code>UserIdSource</code>.</p>
</div>
<div class="paragraph">
<p>In this case, we&#8217;re returning an instance of <code>AuthenticationNameUserIdSource</code>.
This implementation of the <code>UserIdSource</code> interface assumes that the application is secured with Spring Security.
It uses the <code>SecurityContextHolder</code> to lookup a <code>SecurityContext</code>, and from that return the <code>name</code> property of the <code>Authentication</code> object.</p>
</div>
<div class="paragraph">
<p>If your application isn&#8217;t secured with Spring Security, you&#8217;ll need to implement the <code>UserIdSource</code> interface as approprate for your application&#8217;s security mechanism.
The <code>UserIdSource</code> interface looks like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>package org.springframework.social;
public interface UserIdSource {
    String getUserId();
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>getUserId()</code> method simply returns a <code>String</code> that uniquely identifies the current user.</p>
</div>
<div class="sect3">
<h4 id="configuring-connection-support-in-xml"><a class="anchor" href="#configuring-connection-support-in-xml"></a>3.1.1. Configuring connection support in XML</h4>
<div class="paragraph">
<p>Up to this point, the connection support configuration has been done using Spring&#8217;s Java-based configuration style.
But you can configure it in either Java configuration or XML.
Here&#8217;s the XML equivalent of the <code>ConnectionFactoryRegistry</code> configuration:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;facebook:config app-id="${facebook.clientId}"
                 app-secret="${facebook.clientSecret}"
                 app-namespace="socialshowcase" /&gt;
&lt;twitter:config app-id="${twitter.consumerKey}"
                app-secret="${twitter.consumerSecret}"/&gt;
&lt;linkedin:config app-id="${linkedin.consumerKey}"
                 app-secret="${linkedin.consumerSecret}"/&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Notice that the three elements in this example come from each provider&#8217;s own XML configuration namespace.
You&#8217;ll need Spring Social&#8217;s Facebook. Twitter, and LinkedIn modules in your classpath to make use of these configuration elements.</p>
</div>
<div class="paragraph">
<p>Spring Social&#8217;s own configuration namespace offers support for configuring a <code>JdbcConnectionRepository</code> like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;social:jdbc-connection-repository/&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>&lt;social:jdbc-connection-repository/&gt;</code> element defaults to use a <code>DataSource</code> bean whose ID is "dataSource".
If you&#8217;ve configured your <code>DataSource</code> bean with a different ID, you&#8217;ll need to explicitly set that:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;social:jdbc-connection-repository data-source-ref="myDS" /&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>&lt;social:jdbc-connection-repository/&gt;</code> also defaults to use a <code>TextEncryptor</code> bean whose ID is "textEnryptor" and a <code>UserIdSource</code> bean whose ID is "userIdSource".
If you&#8217;ve given those beans different IDs, then you&#8217;ll need to explicitly set those as well:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;social:jdbc-connection-repository
    data-source-ref="myDS"
    encryptor-ref="encryptor"
    user-id-source-ref="userIdSrc" /&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="creating-connections-with-connectcontroller"><a class="anchor" href="#creating-connections-with-connectcontroller"></a>3.2. Creating connections with ConnectController</h3>
<div class="paragraph">
<p>With its dependencies configured, ConnectController now has what it
needs to allow users to establish connections with registered service
providers. Now, simply add it to your Social @Configuration:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>@Configuration
public class SocialConfig {

    @Bean
    public ConnectController connectController(
                ConnectionFactoryLocator connectionFactoryLocator,
                ConnectionRepository connectionRepository) {
        return new ConnectController(connectionFactoryLocator, connectionRepository);
    }

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Or, if you prefer Spring&#8217;s XML-based configuration, then you can
configure ConnectController like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;bean class="org.springframework.social.connect.web.ConnectController"&gt;
    &lt;!-- relies on by-type autowiring for the constructor-args --&gt;
&lt;/bean&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>ConnectController</code> supports authorization flows for OAuth 1 and OAuth 2,
relying on <code>OAuth1Operations</code> or <code>OAuth2Operations</code> to handle the specifics
for each protocol. <code>ConnectController</code> will obtain the appropriate OAuth
operations interface from one of the provider connection factories
registered with <code>ConnectionFactoryRegistry</code>. It will select a specific
<code>ConnectionFactory</code> to use by matching the connection factory&#8217;s ID with
the URL path. The path pattern that ConnectController handles is
"/connect/{providerId}". Therefore, if <code>ConnectController</code> is handling a
request for "/connect/twitter", then the <code>ConnectionFactory</code> whose
<code>getProviderId()</code> returns "twitter" will be used. (As configured in the
previous section, <code>TwitterConnectionFactory</code> will be chosen.)</p>
</div>
<div class="paragraph">
<p>When coordinating a connection with a service provider,
<code>ConnectController</code> constructs a callback URL for the provider to redirect
to after the user grants authorization. By default <code>ConnectController</code>
uses information from the request to determine the protocol, host name,
and port number to use when creating the callback URL. This is fine in
many cases, but if your application is hosted behind a proxy those
details may point to an internal server and will not be suitable for
constructing a public callback URL.</p>
</div>
<div class="paragraph">
<p>If you have this problem, you can set the <code>applicationUrl</code> property to the base external URL of your application. <code>ConnectController</code> will use that URL to construct the callback URL instead of using information from the request.
For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>@Configuration
public class SocialConfig {

    @Bean
    public ConnectController connectController() {
        ConnectController controller = new ConnectController(
            connectionFactoryLocator(), connectionRepository());
        controller.setApplicationUrl(environment.getProperty("application.url");
        return controller;
    }

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Or if you prefer XML configuration:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;bean class="org.springframework.social.connect.web.ConnectController"&gt;
    &lt;!-- relies on by-type autowiring for the constructor-args --&gt;
    &lt;property name="applicationUrl" value="${application.url}" /&gt;
&lt;/bean&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Just as with the authorization keys and secrets, we recommend that you externalize the application URL because it will likely vary across different deployment environments.</p>
</div>
<div class="paragraph">
<p>The flow that <code>ConnectController</code> follows is slightly different, depending on which authorization protocol is supported by the service provider.
For OAuth 2-based providers, the flow is as follows:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>GET /connect</code> - Displays a web page showing connection status for all
providers.</p>
</li>
<li>
<p><code>GET /connect/{providerId}</code> - Displays a web page showing connection
status to the provider.</p>
</li>
<li>
<p><code>POST /connect/{providerId}</code> - Initiates the connection flow with the
provider.</p>
</li>
<li>
<p><code>GET /connect/{providerId}?code={code}</code> - Receives the authorization
callback from the provider, accepting an authorization code. Uses the
code to request an access token and complete the connection.</p>
</li>
<li>
<p><code>DELETE /connect/{providerId}</code> - Severs all of the user&#8217;s connection
with the provider.</p>
</li>
<li>
<p><code>DELETE /connect/{providerId}/{providerUserId}</code> - Severs a specific
connection with the provider, based on the user&#8217;s provider user ID.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For an OAuth 1 provider, the flow is very similar, with only a subtle
difference in how the callback is handled:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>GET /connect</code> - Displays a web page showing connection status for all
providers.</p>
</li>
<li>
<p><code>GET /connect/{providerId}</code> - Displays a web page showing connection
status to the provider.</p>
</li>
<li>
<p><code>POST /connect/{providerId}</code> - Initiates the connection flow with the
provider.
*
<code>GET /connect/{providerId}?oauth_token={request token}&amp;oauth_verifier={verifier}</code></p>
<div class="ulist">
<ul>
<li>
<p>Receives the authorization callback from the provider, accepting a
verification code. Exchanges this verification code along with the
request token for an access token and completes the connection. The
<code>oauth_verifier</code> parameter is optional and is only used for providers
implementing OAuth 1.0a.</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>DELETE /connect/{providerId}</code> - Severs all of the user&#8217;s connection
with the provider.</p>
</li>
<li>
<p><code>DELETE /connect/{providerId}/{providerUserId}</code> - Severs a specific
connection with the provider, based on the user&#8217;s provider user ID.</p>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="displaying-a-connection-page"><a class="anchor" href="#displaying-a-connection-page"></a>3.2.1. Displaying a connection page</h4>
<div class="paragraph">
<p>Before the connection flow starts in earnest, a web application may choose to show a page that offers the user information on their connection status.
This page would offer them the opportunity to create a connection between their account and their social profile.
<code>ConnectController</code> can display such a page if the browser navigates to <code>/connect/{provider}</code>.</p>
</div>
<div class="paragraph">
<p>For example, to display a connection status page for Twitter, where the provider name is "twitter", your application should provide a link similar to this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint html language-html"><code>&lt;a href="&lt;c:url value="/connect/twitter" /&gt;"&gt;Connect to Twitter&lt;/a&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>ConnectController</code> will respond to this request by first checking to see if a connection already exists between the user&#8217;s account and Twitter.
If not, then it will with a view that should offer the user an opportunity to create the connection.
Otherwise, it will respond with a view to inform the user that a connection already exists.</p>
</div>
<div class="paragraph">
<p>The view names that <code>ConnectController</code> responds with are based on the provider&#8217;s name.
In this case, since the provider name is "twitter", the view names are "connect/twitterConnect" and "connect/twitterConnected".</p>
</div>
<div class="paragraph">
<p>Optionally, you may choose to display a page that shows connection status for all providers.
In that case, the link might look like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint html language-html"><code>&lt;a href="&lt;c:url value="/connect" /&gt;"&gt;Your connections&lt;/a&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>The view name that <code>ConnectController</code> responds with for this URL is "connect/status".</p>
</div>
</div>
<div class="sect3">
<h4 id="initiating-the-connection-flow"><a class="anchor" href="#initiating-the-connection-flow"></a>3.2.2. Initiating the connection flow</h4>
<div class="paragraph">
<p>To kick off the connection flow, the application should <code>POST</code> to <code>/connect/{providerId}</code>.
Continuing with the Twitter example, a JSP view resolved from "connect/twitterConnect" might include the following form:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint html language-html"><code>&lt;form action="&lt;c:url value="/connect/twitter" /&gt;" method="POST"&gt;
    &lt;p&gt;You haven't created any connections with Twitter yet. Click the button to create
       a connection between your account and your Twitter profile.
       (You'll be redirected to Twitter where you'll be asked to authorize the connection.)&lt;/p&gt;
    &lt;p&gt;&lt;button type="submit"&gt;&lt;img src="&lt;c:url value="/resources/social/twitter/signin.png" /&gt;"/&gt;
    &lt;/button&gt;&lt;/p&gt;
&lt;/form&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>When <code>ConnectController</code> handles the request, it will redirect the browser to the provider&#8217;s authorization page.
In the case of an OAuth 1 provider, it will first fetch a request token from the provider and pass it along as a parameter to the authorization page.
Request tokens aren&#8217;t used in OAuth 2, however, so instead it passes the application&#8217;s client ID and redirect URI as parameters to the authorization page.</p>
</div>
<div class="paragraph">
<p>For example, Twitter&#8217;s authorization URL has the following pattern:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>https://twitter.com/oauth/authorize?oauth_token={token}</pre>
</div>
</div>
<div class="paragraph">
<p>If the application&#8217;s request token were "vPyVSe"<span class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</span>, then the browser would be redirected to <a href="https://twitter.com/oauth/authorize?oauth_token=vPyVSe">https://twitter.com/oauth/authorize?oauth_token=vPyVSe</a> and a page similar to the following would be displayed to the user (from Twitter)<span class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnote_2" title="View footnote.">2</a>]</span>:</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="resources/images/twitter-authorize.png" alt="image"></span></p>
</div>
<div class="paragraph">
<p>In contrast, Facebook is an OAuth 2 provider, so its authorization URL takes a slightly different pattern:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>https://graph.facebook.com/oauth/authorize?client_id={clientId}&amp;redirect_uri={redirectUri}</pre>
</div>
</div>
<div class="paragraph">
<p>Thus, if the application&#8217;s Facebook client ID is "0b754" and it&#8217;s redirect URI is "http://www.mycoolapp.com/connect/facebook", then the browser would be redirected to <a href="https://graph.facebook.com/oauth/authorize?client_id=0b754&amp;redirect_uri=http://www.mycoolapp.com/connect/facebook">https://graph.facebook.com/oauth/authorize?client_id=0b754&amp;redirect_uri=http://www.mycoolapp.com/connect/facebook</a> and Facebook would display the following authorization page to the user:</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="resources/images/facebook-authorize-basic.png" alt="image"></span></p>
</div>
<div class="paragraph">
<p>If the user clicks the "Allow" button to authorize access, the provider will redirect the browser back to the authorization callback URL where <code>ConnectController</code> will be waiting to complete the connection.</p>
</div>
<div class="paragraph">
<p>The behavior varies from provider to provider when the user denies the authorization.
For instance, Twitter will simply show a page telling the user that they denied the application access and does not redirect back to the application&#8217;s callback URL.
Facebook, on the other hand, will redirect back to the callback URL with error information as request parameters.</p>
</div>
</div>
<div class="sect3">
<h4 id="authorization-scope"><a class="anchor" href="#authorization-scope"></a>3.2.3. Authorization scope</h4>
<div class="paragraph">
<p>In the previous example of authorizing an application to interact with a user&#8217;s Facebook profile, you notice that the application is only requesting access to the user&#8217;s basic profile information.
But there&#8217;s much more that an application can do on behalf of a user with Facebook than simply harvest their profile data.
For example, how can an application gain authorization to post to a user&#8217;s Facebook wall?</p>
</div>
<div class="paragraph">
<p>OAuth 2 authorization may optionally include a scope parameter that indicates the type of authorization being requested.
On the provider, the "scope" parameter should be passed along to the authorization URL.
In the case of Facebook, that means that the Facebook authorization URL pattern should be as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>https://graph.facebook.com/oauth/authorize?client_id={clientId}&amp;redirect_uri={redirectUri}&amp;scope={scope}</pre>
</div>
</div>
<div class="paragraph">
<p><code>ConnectController</code> accepts a "scope" parameter at authorization and passes its value along to the provider&#8217;s authorization URL.
For example, to request permission to post to a user&#8217;s Facebook wall, the connect form might look like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint html language-html"><code>&lt;form action="&lt;c:url value="/connect/twitter" /&gt;" method="POST"&gt;
    &lt;input type="hidden" name="scope" value="publish_stream,offline_access" /&gt;
    &lt;p&gt;You haven't created any connections with Twitter yet. Click the button to create
       a connection between your account and your Twitter profile.
       (You'll be redirected to Twitter where you'll be asked to authorize the connection.)&lt;/p&gt;
    &lt;p&gt;&lt;button type="submit"&gt;&lt;img src="&lt;c:url value="/resources/social/twitter/signin.png" /&gt;"/&gt;
    &lt;/button&gt;&lt;/p&gt;
&lt;/form&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>The hidden "scope" field contains the scope values to be passed along in the <code>scope&gt;</code> parameter to Facebook&#8217;s authorization URL.
In this case, "publish_stream" requests permission to post to a user&#8217;s wall.
In addition, "offline_access" requests permission to access Facebook on behalf of a user even when the user isn&#8217;t using the application.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>OAuth 2 access tokens typically expire after some period of time.
Per the OAuth 2 specification, an application may continue accessing a provider after a token expires by using a refresh token to either renew an expired access token or receive a new access token (all without troubling the user to re-authorize the application).</p>
</div>
<div class="paragraph">
<p>Facebook does not currently support refresh tokens.
Moreover, Facebook access tokens expire after about 2 hours.
So, to avoid having to ask your users to re-authorize ever 2 hours, the best way to keep a long-lived access token is to request "offline_access".</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>When asking for "publish_stream,offline_access" authorization, the user will be prompted with the following authorization page from Facebook:</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="resources/images/facebook-authorize-scoped.png" alt="image"></span></p>
</div>
<div class="paragraph">
<p>Scope values are provider-specific, so check with the service provider&#8217;s documentation for the available scopes.
Facebook scopes are documented at <a href="http://developers.facebook.com/docs/authentication/permissions">http://developers.facebook.com/docs/authentication/permissions</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="responding-to-the-authorization-callback"><a class="anchor" href="#responding-to-the-authorization-callback"></a>3.2.4. Responding to the authorization callback</h4>
<div class="paragraph">
<p>After the user agrees to allow the application have access to their profile on the provider, the provider will redirect their browser back to the application&#8217;s authorization URL with a code that can be exchanged for an access token.
For OAuth 1.0a providers, the callback URL is expected to receive the code (known as a verifier in OAuth 1 terms) in an <code>oauth_verifier</code> parameter.
For OAuth 2, the code will be in a <code>code</code>
parameter.</p>
</div>
<div class="paragraph">
<p><code>ConnectController</code> will handle the callback request and trade in the verifier/code for an access token.
Once the access token has been received, the OAuth dance is complete and the application may use the access token to interact with the provider on behalf of the user.
The last thing that <code>ConnectController</code> does is to hand off the access token to the <code>ConnectionRepository</code> implementation to be stored for future use.</p>
</div>
</div>
<div class="sect3">
<h4 id="disconnecting"><a class="anchor" href="#disconnecting"></a>3.2.5. Disconnecting</h4>
<div class="paragraph">
<p>To delete a connection via <code>ConnectController</code>, submit a DELETE request to "/connect/{provider}".</p>
</div>
<div class="paragraph">
<p>In order to support this through a form in a web browser, you&#8217;ll need to have Spring&#8217;s <a href="http://docs.spring.io/spring/docs/3.0.x/javadoc-api/org/springframework/web/filter/HiddenHttpMethodFilter.html">HiddenHttpMethodFilter</a> configured in your application&#8217;s web.xml.
Then you can provide a disconnect button via a form like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint html language-html"><code>&lt;form action="&lt;c:url value="/connect/twitter" /&gt;" method="post"&gt;
  &lt;div class="formInfo"&gt;
    &lt;p&gt;
      Spring Social Showcase is connected to your Twitter account.
      Click the button if you wish to disconnect.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;button type="submit"&gt;Disconnect&lt;/button&gt;
  &lt;input type="hidden" name="_method" value="delete" /&gt;
&lt;/form&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>When this form is submitted, <code>ConnectController</code> will disconnect the user&#8217;s account from the provider. It does this by calling the <code>disconnect()</code> method on each of the <code>Connection`s returned by the provider's `getConnections()</code> method.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="connection-interceptors"><a class="anchor" href="#connection-interceptors"></a>3.3. Connection interceptors</h3>
<div class="paragraph">
<p>In the course of creating a connection with a service provider, you may want to inject additional functionality into the connection flow.
For instance, perhaps you&#8217;d like to automatically post a tweet to a user&#8217;s Twitter timeline immediately upon creating the connection.</p>
</div>
<div class="paragraph">
<p><code>ConnectController</code> may be configured with one or more connection interceptors that it will call at points in the connection flow.
These interceptors are defined by the <code>ConnectInterceptor</code> interface:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public interface ConnectInterceptor&lt;A&gt; {

    void preConnect(ConnectionFactory&lt;A&gt; connectionFactory, MultiValueMap&lt;String, String&gt; parameters, WebRequest request);

    void postConnect(Connection&lt;A&gt; connection, WebRequest request);

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>preConnect()</code> method will be called by <code>ConnectController</code> just before redirecting the browser to the provider&#8217;s authorization page.
Custom authorization parameters may be added to the provided parameter map.
<code>postConnect()</code> will be called immediately after a connection has been persisted linking the user&#8217;s local account with the provider profile.</p>
</div>
<div class="paragraph">
<p>For example, suppose that after connecting a user account with their Twitter profile you want to immediately post a tweet about that connection to the user&#8217;s Twitter timeline.
To accomplish that, you might write the following connection interceptor:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public class TweetAfterConnectInterceptor implements ConnectInterceptor&lt;Twitter&gt; {

    public void preConnect(ConnectionFactory&lt;Twitter&gt; provider, MultiValueMap&lt;String, String&gt; parameters, WebRequest request) {
        // nothing to do
    }

    public void postConnect(Connection&lt;Twitter&gt; connection, WebRequest request) {
        connection.updateStatus("I've connected with the Spring Social Showcase!");
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>This interceptor can then be injected into ConnectController when it is
created:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>@Bean
public ConnectController connectController() {
    ConnectController controller = new ConnectController(connectionFactoryLocator(),
        connectionRepository());
    controller.addInterceptor(new TweetAfterConnectInterceptor());
    return controller;
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Or, as configured in XML:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;bean class="org.springframework.social.connect.web.ConnectController"&gt;
    &lt;property name="interceptors"&gt;
        &lt;list&gt;
            &lt;bean class="org.springframework.social.showcase.twitter.TweetAfterConnectInterceptor" /&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Note that the <code>interceptors</code> property is a list and can take as many interceptors as you&#8217;d like to wire into it.
When it comes time for <code>ConnectController</code> to call into the interceptors, it will only invoke the interceptor methods for those interceptors whose service operations type matches the service provider&#8217;s operations type.
In the example given here, only connections made through a service provider whose operation type is <code>Twitter</code> will trigger the interceptor&#8217;s methods.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="section_signin"><a class="anchor" href="#section_signin"></a>4. Signing in with Service Provider Accounts</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In order to ease sign in for their users, many applications allow sign in with a service provider such as Twitter or Facebook.
With this authentication technique, the user signs into (or may already be signed into) his or her provider account.
The application then tries to match that provider account to a local user account.
If a match is found, the user is automatically signed into the application.</p>
</div>
<div class="paragraph">
<p>Spring Social supports such provider-based authentication in two different ways:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>ProviderSignInController</code> is a Spring MVC controller that performs a similar flow as <code>ConnectController</code>, except that it ultimately results in an authentication instead of a new connection.</p>
</li>
<li>
<p><code>SocialAuthenticationFilter</code> is a Spring Security filter that plugs into Spring Security&#8217;s filter chain for provider sign in.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Which of these options you choose will come down to whether or not you are using Spring Security to secure your application.
Although both options will work with Spring Security, we recommend using <code>SocialAuthenticationFilter</code> in applications where Spring Security is in play.
As an implementation of Spring Security&#8217;s <code>AuthenticationFilter</code>, it offers a tighter and more natural integration with Spring Security.
<code>ProviderSignInController</code>, on the other hand, is agnostic to the security mechanism your application employs and can be used in applications that aren&#8217;t using Spring Security.</p>
</div>
<div class="sect2">
<h3 id="enabling-provider-sign-in-with-code-socialauthenticationfilter-code"><a class="anchor" href="#enabling-provider-sign-in-with-code-socialauthenticationfilter-code"></a>4.1. Enabling provider sign in with <code>SocialAuthenticationFilter</code></h3>
<div class="paragraph">
<p><code>SocialAuthenticationFilter</code> is an implementation of Spring Security&#8217;s <code>AuthenticationFilter</code>.
As such, it plugs into Spring Security&#8217;s filter chain just like any other authentication filter.</p>
</div>
<div class="paragraph">
<p>The easiest way to configure <code>SocialAuthenticationFilter</code> is to apply <code>SpringSocialConfigurer</code> in your Spring Security Java configuration.
For example, the following <code>configure()</code> method (from the spring-social-showcase-sec sample) configures several factors of web security, including <code>SpringSocialConfigurer</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>@Override
protected void configure(HttpSecurity http) throws Exception {
    http
        .formLogin()
            .loginPage("/signin")
            .loginProcessingUrl("/signin/authenticate")
            .failureUrl("/signin?param.error=bad_credentials")
        .and()
            .logout()
                .logoutUrl("/signout")
                .deleteCookies("JSESSIONID")
        .and()
            .authorizeRequests()
                .antMatchers("/admin/**", "/favicon.ico", ...).permitAll()
                .antMatchers("/**").authenticated()
        .and()
            .rememberMe()
        .and()
            .apply(new SpringSocialConfigurer());
}</code></pre>
</div>
</div>
<div class="sect3">
<h4 id="adding-a-provider-sign-in-button"><a class="anchor" href="#adding-a-provider-sign-in-button"></a>4.1.1. Adding a provider sign-in button</h4>
<div class="paragraph">
<p><code>SocialAuthenticationFilter</code> reacts to requests whose path fits a pattern of "/auth/{providerid}".
Therefore, to initiate a provider sign-in flow via <code>SocialAuthenticationFilter</code>, you can simply provide a link to "/auth/{providerid}" on a web page.
For example, consider the following excerpt from a Thymeleaf template:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint html language-html"><code>&lt;!-- TWITTER SIGNIN --&gt;
&lt;p&gt;&lt;a th:href="@{/auth/twitter}"&gt;&lt;img th:src="@{/resources/social/twitter/sign-in-with-twitter-d.png}" border="0"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!-- FACEBOOK SIGNIN --&gt;
&lt;p&gt;&lt;a th:href="@{/auth/facebook}"&gt;&lt;img th:src="@{/resources/social/facebook/sign-in-with-facebook.png}" border="0"/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!-- LINKEDIN SIGNIN --&gt;
&lt;p&gt;&lt;a th:href="@{/auth/linkedin}"&gt;Sign In with LinkedIn&lt;/a&gt;&lt;/p&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>This HTML results in 3 links, one each for Twitter, Facebook, and LinkedIn.
When the user clicks on the Twitter link, the browser will navigate to a URL whose path is "/auth/twitter".
<code>SocialAuthenticationFilter</code> will intercept that request and initiate an authentication flow with Twitter by redirecting the browser to Twitter&#8217;s authentication page:</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="resources/images/sign-in-with-twitter.png" alt="image"></span></p>
</div>
<div class="paragraph">
<p>Of course, for <code>SocialAuthentication</code> to work, you must have configured a <code>ConnectionFactory</code> implementation corresponding to the provider (e.g., <code>TwitterConnectionFactory</code>).</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="enabling-provider-sign-in-with-code-providersignincontroller-code"><a class="anchor" href="#enabling-provider-sign-in-with-code-providersignincontroller-code"></a>4.2. Enabling provider sign in with <code>ProviderSignInController</code></h3>
<div class="paragraph">
<p><code>ProviderSignInController</code> works very much like <code>ConnectController</code> in that it goes through the OAuth flow (either OAuth 1 or OAuth 2, depending on the provider).
Instead of creating a connection at the end of process, however, <code>ProviderSignInController</code> attempts to find a previously established connection and uses the connected account to authenticate the user with the application.
If no previous connection matches, the flow will be sent to the application&#8217;s sign up page so that the user may register with the application.</p>
</div>
<div class="paragraph">
<p>To add provider sign in capability to your Spring application, configure <code>ProviderSignInController</code> as a bean in your Spring MVC application:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>@Bean
public ProviderSignInController providerSignInController(
            ConnectionFactoryLocator connectionFactoryLocator,
            UsersConnectionRepository usersConnectionRepository) {
    return new ProviderSignInController(
        connectionFactoryLocator,
        usersConnectionRepository,
        new SimpleSignInAdapter(new HttpSessionRequestCache()));
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Or in XML, if you prefer:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;bean class="org.springframework.social.connect.web.ProviderSignInController"&gt;
    &lt;!-- relies on by-type autowiring for the constructor-args --&gt;
&lt;/bean&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>As with <code>ConnectController</code>, <code>ProviderSignInController</code> uses information from the request to determine the protocol, host name, and port number to use when creating a callback URL.
But you may set the <code>applicationUrl</code> property to the base external URL of your application to overcome any problems where the request refers to an internal server.
For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>@Bean
public ProviderSignInController providerSignInController(
            ConnectionFactoryLocator connectionFactoryLocator,
            UsersConnectionRepository usersConnectionRepository) {
    ProviderSignInController controller = new ProviderSignInController(
        connectionFactoryLocator,
        usersConnectionRepository(),
        new SimpleSignInAdapter(new HttpSessionRequestCache()));
    controller.setApplicationUrl(environment.getProperty("application.url"));
    return controller;
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Or when configured in XML:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;bean class="org.springframework.social.connect.web.ProviderSignInController"&gt;
    &lt;!-- relies on by-type autowiring for the constructor-args --&gt;
    &lt;property name="applicationUrl" value="${application.url}" /&gt;
&lt;/bean&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Once again, we recommend that you externalize the value of the application URL since it will vary between deployment environments.</p>
</div>
<div class="paragraph">
<p>When authenticating via an OAuth 2 provider, <code>ProviderSignInController</code> supports the following flow:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>POST /signin/{providerId}</code> - Initiates the sign in flow by
redirecting to the provider&#8217;s authentication endpoint.</p>
</li>
<li>
<p><code>GET /signin/{providerId}?code={verifier}</code> - Receives the
authentication callback from the provider, accepting a code. Exchanges
this code for an access token. Using this access token, it retrieves the
user&#8217;s provider user ID and uses that to lookup a connected account and
then authenticates to the application through the sign in service.</p>
<div class="ulist">
<ul>
<li>
<p>If the provider user ID doesn&#8217;t match any existing connection,
<code>ProviderSignInController</code> will redirect to a sign up URL. The default
sign up URL is "/signup" (relative to the application root), but can be
customized by setting the <code>signUpUrl</code> property.</p>
</li>
<li>
<p>If the provider user ID matches more than one existing connection,
<code>ProviderSignInController</code> will redirect to the application&#8217;s sign in URL
to offer the user a chance to sign in through another provider or with
their username and password. The request to the sign in URL will have an
"error" query parameter set to "multiple_users" to indicate the problem
so that the page can communicate it to the user. The default sign in URL
is "/signin" (relative to the application root), but can be customized
by setting the <code>signInUrl</code> property.</p>
</li>
<li>
<p>If any error occurs while fetching the access token or while fetching
the user&#8217;s profile data, <code>ProviderSignInController</code> will redirect to the
application&#8217;s sign in URL. The request to the sign in URL will have an
"error" query parameter set to "provider" to indicate an error occurred
while communicating with the provider. The default sign in URL is
"/signin" (relative to the application root), but can be customized by
setting the <code>signInUrl</code> property.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>For OAuth 1 providers, the flow is only slightly different:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>POST /signin/{providerId}</code> - Initiates the sign in flow. This
involves fetching a request token from the provider and then redirecting
to the provider&#8217;s authentication endpoint.</p>
<div class="ulist">
<ul>
<li>
<p>If any error occurs while fetching the request token,
<code>ProviderSignInController</code> will redirect to the application&#8217;s sign in URL.
The request to the sign in URL will have an "error" query parameter set
to "provider" to indicate an error occurred while communicating with the
provider. The default sign in URL is "/signin" (relative to the
application root), but can be customized by setting the <code>signInUrl</code>
property.
*
<code>GET /signin/{providerId}?oauth_token={request token}&amp;oauth_verifier={verifier}</code></p>
<div class="ulist">
<ul>
<li>
<p>Receives the authentication callback from the provider, accepting a
verification code. Exchanges this verification code along with the
request token for an access token. Using this access token, it retrieves
the user&#8217;s provider user ID and uses that to lookup a connected account
and then authenticates to the application through the sign in service.</p>
</li>
</ul>
</div>
</li>
<li>
<p>If the provider user ID doesn&#8217;t match any existing connection,
<code>ProviderSignInController</code> will redirect to a sign up URL. The default
sign up URL is "/signup" (relative to the application root), but can be
customized by setting the <code>signUpUrl</code> property.</p>
</li>
<li>
<p>If the provider user ID matches more than one existing connection,
<code>ProviderSignInController</code> will redirect to the application&#8217;s sign in URL
to offer the user a chance to sign in through another provider or with
their username and password. The request to the sign in URL will have an
"error" query parameter set to "multiple_users" to indicate the problem
so that the page can communicate it to the user. The default sign in URL
is "/signin" (relative to the application root), but can be customized
by setting the <code>signInUrl</code> property.</p>
</li>
<li>
<p>If any error occurs when exchanging the request token for an access
token or while fetching the user&#8217;s profile data,
<code>ProviderSignInController</code> will redirect to the application&#8217;s sign in URL.
The request to the sign in URL will have an "error" query parameter set
to "provider" to indicate an error occurred while communicating with the
provider. The default sign in URL is "/signin" (relative to the
application root), but can be customized by setting the <code>signInUrl</code>
property.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="providersignincontroller-s-dependencies"><a class="anchor" href="#providersignincontroller-s-dependencies"></a>4.2.1. ProviderSignInController&#8217;s dependencies</h4>
<div class="paragraph">
<p>As shown in the Java-based configuration above, <code>ProviderSignInController</code> depends on a handful of other objects to do its job.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A <code>ConnectionFactoryLocator</code> to lookup the <code>ConnectionFactory</code> used to
create the <code>Connection</code> to the provider.</p>
</li>
<li>
<p>A <code>UsersConnectionRepository</code> to find the user that has the connection
to the provider user attempting to sign in.</p>
</li>
<li>
<p>A <code>SignInAdapter</code> to sign a user into the application when a matching
connection is found.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>When using XML configuration, it isn&#8217;t necessary to explicitly configure these constructor arguments because <code>ProviderSignInController</code>'s constructor is annotated with <code>@Inject</code>.
Those dependencies will be given to <code>ProviderSignInController</code> via autowiring.
You&#8217;ll still need to make sure they&#8217;re available as beans in the Spring application context so that they can be autowired.</p>
</div>
<div class="paragraph">
<p>You should have already configured most of these dependencies when setting up connection support (in the previous chapter).
But when used with <code>ProviderSignInController</code>, you should configure them to be created as scoped proxies:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>@Bean
@Scope(value="singleton", proxyMode=ScopedProxyMode.INTERFACES)
public ConnectionFactoryLocator connectionFactoryLocator() {
    ConnectionFactoryRegistry registry = new ConnectionFactoryRegistry();

    registry.addConnectionFactory(new FacebookConnectionFactory(
        environment.getProperty("facebook.clientId"),
        environment.getProperty("facebook.clientSecret")));

    registry.addConnectionFactory(new TwitterConnectionFactory(
        environment.getProperty("twitter.consumerKey"),
        environment.getProperty("twitter.consumerSecret")));

    return registry;
}

@Bean
@Scope(value="singleton", proxyMode=ScopedProxyMode.INTERFACES)
public UsersConnectionRepository usersConnectionRepository() {
    return new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator(), textEncryptor);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>In the event that the sign in attempt fails, the sign in attempt will be stored in the session to be used to present a sign-up page to the user (see <a href="#section_signUpForm">Signing up with a sign up form</a>).</p>
</div>
<div class="paragraph">
<p>The <code>SignInAdapter</code> is exclusively used for provider sign in and so a <code>SignInAdapter</code> bean will need to be added to the configuration.
But first, you&#8217;ll need to write an implementation of the <code>SignInAdapter</code> interface.</p>
</div>
<div class="paragraph">
<p>The <code>SignInAdapter</code> interface is defined as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public interface SignInAdapter {
    String signIn(String userId, Connection&lt;?&gt; connection, NativeWebRequest request);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>signIn()</code> method takes the local application user&#8217;s user ID normalized as a String.
No other credentials are necessary here because by the time this method is called the user will have signed into the provider and their connection with that provider has been used to prove the user&#8217;s identity.
Implementations of this interface should use this user ID to authenticate the user to the application.</p>
</div>
<div class="paragraph">
<p>Different applications will implement security differently, so each application must implement <code>SignInAdapter</code> in a way that fits its unique security scheme.
For example, suppose that an application&#8217;s security is based on Spring Security and simply uses a user&#8217;s account ID as their principal.
In that case, a simple implementation of <code>SignInAdapter</code> might look like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>@Service
public class SpringSecuritySignInAdapter implements SignInAdapter {
    public String signIn(String localUserId, Connection&lt;?&gt; connection, NativeWebRequest request) {
        SecurityContextHolder.getContext().setAuthentication(
            new UsernamePasswordAuthenticationToken(localUserId, null, null));
        return null;
    }
}</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="adding-a-provider-sign-in-button-2"><a class="anchor" href="#adding-a-provider-sign-in-button-2"></a>4.2.2. Adding a provider sign in button</h4>
<div class="paragraph">
<p>With <code>ProviderSignInController</code> and a <code>SignInAdapter</code> configured, the backend support for provider sign in is in place.
The last thing to do is to add a sign in button to your application that will kick off the authentication flow with <code>ProviderSignInController</code>.</p>
</div>
<div class="paragraph">
<p>For example, the following HTML snippet adds a "Signin with Twitter" button to a page:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint html language-html"><code>&lt;form id="tw_signin" action="&lt;c:url value="/signin/twitter"/&gt;" method="POST"&gt;
  &lt;button type="submit"&gt;
    &lt;img src="&lt;c:url value="/resources/social/twitter/sign-in-with-twitter-d.png"/&gt;" /&gt;
  &lt;/button&gt;
&lt;/form&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Notice that the path used in the form&#8217;s <code>action</code> attribute maps to the first step in ProviderSignInController&#8217;s flow.
In this case, the provider is identified as "twitter".</p>
</div>
<div class="paragraph">
<p>Clicking this button will trigger a POST request to "/signin/twitter", kicking off the Twitter sign in flow.
If the user has not yet signed into Twitter, the user will be presented with the following page from Twitter:</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="resources/images/sign-in-with-twitter.png" alt="image"></span></p>
</div>
<div class="paragraph">
<p>After signing in, the flow will redirect back to the application to complete the sign in process.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="signing-up-after-a-failed-sign-in"><a class="anchor" href="#signing-up-after-a-failed-sign-in"></a>4.3. Signing up after a failed sign in</h3>
<div class="paragraph">
<p>If <code>ProviderSignInController</code> can&#8217;t find a local user associated with a provider user attempting to sign in, there may be an opportunity to have the user sign up with the application.
Leveraging the information about the user received from the provider, the user may be presented with a pre-filled sign up form to explicitly sign up with the application.
It&#8217;s also possible to use the user&#8217;s provider data to implicitly create a new local application user without presenting a sign up form.</p>
</div>
<div class="sect3">
<h4 id="section_signUpForm"><a class="anchor" href="#section_signUpForm"></a>4.3.1. Signing up with a sign up form</h4>
<div class="paragraph">
<p>By default, the sign up URL is "/signup", relative to the application root.
You can override that default by setting the <code>signUpUrl</code> property on the controller.
For example, the following configuration of <code>ProviderSignInController</code> sets the sign up URL to "/register":</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>@Bean
public ProviderSignInController providerSignInController(
            ConnectionFactoryLocator connectionFactoryLocator,
            UsersConnectionRepository usersConnectionRepository) {
    ProviderSignInController controller = new ProviderSignInController(
        connectionFactoryLocator,
        usersConnectionRepository(),
        new SimpleSignInAdapter(new HttpSessionRequestCache()));
    controller.setSignUpUrl("/register");
    return controller;
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Or to set the sign up URL using XML configuration:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint xml language-xml"><code>&lt;bean class="org.springframework.social.connect.web.ProviderSignInController"&gt;
    &lt;property name="signUpUrl" value="/register" /&gt;
&lt;/bean&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Before redirecting to the sign up page, <code>ProviderSignInController</code> collects some information about the authentication attempt.
This information can be used to prepopulate the sign up form and then, after successful sign up, to establish a connection between the new account and the provider account.</p>
</div>
<div class="paragraph">
<p>To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from <code>ProviderSignInUtils#getConnection()</code>.
For example, consider this Spring MVC controller method that setups up the sign up form with a <code>SignupForm</code> to bind to the sign up form:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>@Autowired
ProviderSignInUtils providerSignInUtils;

@RequestMapping(value="/signup", method=RequestMethod.GET)
public SignupForm signupForm(WebRequest request) {
    Connection&lt;?&gt; connection = providerSignInUtils.getConnection(request);
    if (connection != null) {
        return SignupForm.fromProviderUser(connection.fetchUserProfile());
    } else {
        return new SignupForm();
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>If <code>ProviderSignInUtils#getConnection()</code> returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application.
In that case, a <code>SignupForm</code> object is created from the user profile data obtained from the connection&#8217;s <code>fetchUserProfile()</code> method.
Within <code>fromProviderUser()</code>, the <code>SignupForm</code> properties may be set like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public static SignupForm fromProviderUser(UserProfile providerUser) {
    SignupForm form = new SignupForm();
    form.setFirstName(providerUser.getFirstName());
    form.setLastName(providerUser.getLastName());
    form.setUsername(providerUser.getUsername());
    form.setEmail(providerUser.getEmail());
    return form;
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Here, the <code>SignupForm</code> is created with the user&#8217;s first name, last name, username, and email from the <code>UserProfile</code>.
In addition, <code>UserProfile</code> also has a <code>getName()</code> method which will return the user&#8217;s full name as given by the provider.</p>
</div>
<div class="paragraph">
<p>The availability of <code>UserProfile</code>'s properties will depend on the provider.
Twitter, for example, does not provide a user&#8217;s email address, so the <code>getEmail()</code> method will always return null after a sign in attempt with Twitter.</p>
</div>
<div class="paragraph">
<p>After the user has successfully signed up in your application a connection can be created between the new local user account and their provider account.
To complete the connection call <code>ProviderSignInUtils#doPostSignUp()</code>.
For example, the following method handles the sign up form submission, creates an account and then calls <code>ProviderSignInUtils#doPostSignUp()</code> to complete the connection:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>@RequestMapping(value="/signup", method=RequestMethod.POST)
public String signup(@Valid SignupForm form, BindingResult formBinding, WebRequest request) {
    if (formBinding.hasErrors()) {
        return null;
    }
    Account account = createAccount(form, formBinding);
    if (account != null) {
        SignInUtils.signin(account.getUsername());
        ProviderSignInUtils.doPostSignUp(account.getUsername(), request);
        return "redirect:/";
    }
    return null;
}</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="implicit-sign-up"><a class="anchor" href="#implicit-sign-up"></a>4.3.2. Implicit sign up</h4>
<div class="paragraph">
<p>To enable implicit sign up, you must create an implementation of the <code>ConnectionSignUp</code> interface and inject an instance of that <code>ConnectionSignUp</code> to the connection repository. The <code>ConnectionSignUp</code> interface is simple, with only a single method to implement:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public interface ConnectionSignUp {
    String execute(Connection&lt;?&gt; connection);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>execute()</code> method is given a <code>Connection</code> that it can use to retrieve information about the user.
It can then use that information to create a new local application user and return the new local user ID.
For example, the following implementation fetches the user&#8217;s provider profile and uses it to create a new account:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public class AccountConnectionSignUp implements ConnectionSignUp {

    private final AccountRepository accountRepository;

    public AccountConnectionSignUp(AccountRepository accountRepository) {
        this.accountRepository = accountRepository;
    }

    public String execute(Connection&lt;?&gt; connection) {
        UserProfile profile = connection.fetchUserProfile();
        Account account = new Account(profile.getUsername(), profile.getFirstName(), profile.getLastName());
        accountRepository.createAccount(account);
        return account.getUsername();
    }

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>If there is any problem in creating the new user implicitly (for example, if the implicitly chosen username is already taken) <code>execute()</code> may return null to indicate that the user could not be created implicitly.
This will ultimately result in <code>ProviderSignInController</code> redirecting the user to the signup page.</p>
</div>
<div class="paragraph">
<p>Once you&#8217;ve written a <code>ConnectionSignUp</code> for your application, you&#8217;ll need to inject it into the <code>UsersConnectionRepository</code>.
In Java-based configuration:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>@Bean
@Scope(value="singleton", proxyMode=ScopedProxyMode.INTERFACES)
public UsersConnectionRepository usersConnectionRepository(AccountRepository accountRepository) {
    JdbcUsersConnectionRepository repository = new JdbcUsersConnectionRepository(
        dataSource, connectionFactoryLocator(), Encryptors.noOpText());
    repository.setConnectionSignUp(new AccountConnectionSignUp(accountRepository));
    return repository;
}</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="section_implementing"><a class="anchor" href="#section_implementing"></a>5. Adding Support for a New Service Provider</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Spring Social makes it easy to add support for service providers that
are not already supported by the framework. If you review the existing
client modules, such as spring-social-twitter and
spring-social-facebook, you will discover they are implemented in a
consistent manner and they apply a set of well-defined extension points.
In this chapter, you will learn how to add support for new service
providers you wish to integrate into your applications.</p>
</div>
<div class="paragraph">
<p>The process of adding support for a new service provider consists of
several steps:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Create a source project for the client code e.g.
<code>spring-social-twitter</code>.</p>
</li>
<li>
<p>Develop or integrate a Java binding to the provider&#8217;s API e.g.
<code>Twitter</code>.</p>
</li>
<li>
<p>Create a <code>ServiceProvider</code> model that allows users to authorize with
the remote provider and obtain authorized API instances e.g.
<code>TwitterServiceProvider</code>.</p>
</li>
<li>
<p>Create an ApiAdapter that maps the provider&#8217;s native API onto the
uniform Connection model e.g. <code>TwitterAdapter</code>.</p>
</li>
<li>
<p>Finally, create a ConnectionFactory that wraps the other artifacts
up and provides a simple interface for establishing connections e.g.
<code>TwitterConnectionFactory</code>.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>The following sections of this chapter walk you through each of the
steps with examples.</p>
</div>
<div class="sect2">
<h3 id="section_creatingAProviderProject"><a class="anchor" href="#section_creatingAProviderProject"></a>5.1. Creating a source project for the provider client code</h3>
<div class="paragraph">
<p>A Spring Social client module is a standard Java project that builds a
single jar artifact e.g. spring-social-twitter.jar. We recommend the
code structure of a client module follow the guidelines described below.</p>
</div>
<div class="sect3">
<h4 id="section_codeStructureGuidelines"><a class="anchor" href="#section_codeStructureGuidelines"></a>5.1.1. Code structure guidelines</h4>
<div class="paragraph">
<p>We recommend the code for a new Spring Social client module reside
within the <code>org.springframework.social.{providerId}</code> base package, where
{providerId} is a unique identifier you assign to the service provider
you are adding support for. Consider some of the providers already
supported by the framework as examples:</p>
</div>
<table class="tableblock frame-all grid-all" style="width:100%; ">
<caption class="title">Table 3. Spring Social Client Modules</caption>
<colgroup>
<col style="width:33%;">
<col style="width:33%;">
<col style="width:33%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Provider ID</th>
<th class="tableblock halign-left valign-top">Artifact Name</th>
<th class="tableblock halign-left valign-top">Base Package</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">facebook</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">spring-social-facebook</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">org.springframework.social.facebook</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">twitter</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">spring-social-twitter</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">org.springframework.social.twitter</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">linkedin</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">spring-social-linkedin</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">org.springframework.social.linkedin</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Within the base package, we recommend the following subpackage
structure:</p>
</div>
<table class="tableblock frame-all grid-all" style="width:100%; ">
<caption class="title">Table 4. Module Structure</caption>
<colgroup>
<col style="width:50%;">
<col style="width:50%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Subpackage</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">api</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The public interface that defines the API binding.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">api.impl</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The implementation of the API binding.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">connect</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The types necessary to establish connections to the service provider.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>You can see this recommended structure in action by reviewing one of the
other client modules such as spring-social-twitter:</p>
</div>
<div class="paragraph">
<p>Here, the central service API type, Twitter, is located in the api
package along with its supporting operations types and data transfer
object types. The primary implementation of that interface,
TwitterTemplate, is located in the api.impl package (along with other
package-private impl types have that been excluded from this view).
Finally, the connect package contains the implementations of various
connect SPIs that enable connections to Twitter to be established and
persisted.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="developing-a-java-binding-to-the-provider-s-api"><a class="anchor" href="#developing-a-java-binding-to-the-provider-s-api"></a>5.2. Developing a Java binding to the provider&#8217;s API</h3>
<div class="paragraph">
<p>Spring Social favors the development of strongly-typed Java bindings to
external service provider APIs. This provides a simple, domain-oriented
interface for Java applications to use to consume the API. When adding
support for a new service provider, if no suitable Java binding already
exists you&#8217;ll need to develop one. If one already exists, such as
Twitter4j for example, it is possible to integrate it into the
framework.</p>
</div>
<div class="sect3">
<h4 id="designing-a-new-java-api-binding"><a class="anchor" href="#designing-a-new-java-api-binding"></a>5.2.1. Designing a new Java API binding</h4>
<div class="paragraph">
<p>API developers retain full control over the design and implementation of
their Java bindings. That said, we offer several design guidelines in an
effort to improve overall consistency and quality:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><em>Favor separating the API binding interface from the implementation.</em>
This is illustrated in the spring-social-twitter example in the previous
section. There, "Twitter" is the central API binding type and it is
declared in the org.springframework.social.twitter.api package with
other public types. "TwitterTemplate" is the primary implementation of
this interface and is located in the
org.springframework.social.twitter.api.impl subpackage along with other
package-private implementation types.</p>
</li>
<li>
<p><em>Favor organizing the API binding hierarchically by RESTful resource.</em>
REST-based APIs typically expose access to a number of resources in an
hierarchical manner. For example, Twitter&#8217;s API provides access to
"status timelines", "searches", "lists", "direct messages", "friends",
"geo location", and "users". Rather than add all operations across these
resources to a single flat "Twitter" interface, the Twitter interface is
organized hierarchically:</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public interface Twitter extends ApiBinding {

    BlockOperations blockOperations();

    DirectMessageOperations directMessageOperations();

    FriendOperations friendOperations();

    GeoOperations geoOperations();

    ListOperations listOperations();

    SearchOperations searchOperations();

    StreamingOperations streamingOperations();

    TimelineOperations timelineOperations();

    UserOperations userOperations();

    RestOperations restOperations();

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>DirectMessageOperations, for example, contains API bindings to Twitter&#8217;s
"direct_messages" resource:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public interface DirectMessageOperations {

    List&lt;DirectMessage&gt; getDirectMessagesReceived();

    List&lt;DirectMessage&gt; getDirectMessagesReceived(int page, int pageSize);

    List&lt;DirectMessage&gt; getDirectMessagesReceived(int page, int pageSize, long sinceId, long maxId);

    List&lt;DirectMessage&gt; getDirectMessagesSent();

    List&lt;DirectMessage&gt; getDirectMessagesSent(int page, int pageSize);

    List&lt;DirectMessage&gt; getDirectMessagesSent(int page, int pageSize, long sinceId, long maxId);

    DirectMessage getDirectMessage(long id);

    void sendDirectMessage(String toScreenName, String text);

    void sendDirectMessage(long toUserId, String text);

    void deleteDirectMessage(long messageId);
}</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="implementing-a-new-java-api-binding"><a class="anchor" href="#implementing-a-new-java-api-binding"></a>5.2.2. Implementing a new Java API binding</h4>
<div class="paragraph">
<p>API developers are free to implement their Java API binding with
whatever REST/HTTP client they see fit. That said, Spring Social&#8217;s
existing API bindings such as spring-social-twitter all use Spring
Framework&#8217;s RestTemplate in conjunction with the Jackson JSON
ObjectMapper and Apache HttpComponents HTTP client. RestTemplate is a
popular REST client that provides a uniform object mapping interface
across a variety of data exchange formats (JSON, XML, etc). Jackson is
the leading Java-based JSON marshalling technology. Apache
HttpComponents has proven to be the most robust HTTP client (if it is
not available on the classpath Spring Social will fallback to standard
J2SE facilities, however). To help promote consistency across Spring
Social&#8217;s supported bindings, we do recommend you consider these
implementation technologies (and please let us know if they do not meet
your needs).</p>
</div>
<div class="paragraph">
<p>Spring Social has adopted a convention where each API implementation
class is named "{ProviderId}Template" e.g. TwitterTemplate. We favor
this convention unless there is a good reason to deviate from it. As
discussed in the previous section, we recommend keeping implementation
types separate from the public API types. We also recommend keeping
internal implementation details package-private.</p>
</div>
<div class="paragraph">
<p>The way in which an API binding implementation is constructed will vary
based on the API&#8217;s authorization protocol. For APIs secured with OAuth1,
the consumerKey, consumerSecret, accessToken, and accessTokenSecret will
be required for construction:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public TwitterTemplate(String consumerKey, String consumerSecret, String accessToken,
    String accessTokenSecret) { ... }</code></pre>
</div>
</div>
<div class="paragraph">
<p>For OAuth2, only the access token should be required:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public FacebookTemplate(String accessToken) { ... }</code></pre>
</div>
</div>
<div class="paragraph">
<p>Each request made to the API server needs to be signed with the
authorization credentials provided during construction of the binding.
This signing process consists of adding an "Authorization" header to
each client request before it is executed. For OAuth1, the process is
quite complicated, and is used to support an elaborate request signature
verification algorithm between the client and server. For OAuth2, it is
a lot simpler, but does still vary across the various drafts of the
OAuth2 specification.</p>
</div>
<div class="paragraph">
<p>To encapsulate this complexity, for each authorization protocol Spring
Social provides a <code>ApiTemplate</code> base class you may extend from to
construct a pre-configured RestTemplate instance that performs the
request signing for you. For OAuth1:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public class TwitterTemplate extends AbstractOAuth1ApiBinding {
    public TwitterTemplate(String consumerKey, String consumerSecret, String accessToken,
            String accessTokenSecret) {
        super(consumerKey, consumerSecret, accessToken, accessTokenSecret);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>An OAuth2 example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public class FacebookTemplate extends AbstractOAuth2ApiBinding {
    public FacebookTemplate(String accessToken) {
        super(accessToken);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Once configured as shown above, you simply call
<code>getRestTemplate()</code> and implement the various API operations. The existing
Spring Social client modules all invoke their RestTemplate instances in
a standard manner:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public TwitterProfile getUserProfile() {
    return getRestTemplate().getForObject(buildUri("account/verify_credentials.json"),
        TwitterProfile.class);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>A note on <code>RestTemplate</code> usage: we do favor the <code>RestTemplate</code> methods that
accept a URI object instead of a uri <code>String</code>. This ensures we always
properly encode client data submitted in URI query parameters, such as
screen_name below:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public TwitterProfile getUserProfile(String screenName) {
    return getRestTemplate().getForObject(buildUri("users/show.json",
        Collections.singletonMap("screen_name", screenName)), TwitterProfile.class);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>For complete implementation examples, consult the source of the existing
API bindings included in Spring Social. The <code>spring-social-twitter</code> and
<code>spring-social-facebook</code> modules provide particularly good references.</p>
</div>
</div>
<div class="sect3">
<h4 id="testing-a-new-java-api-binding"><a class="anchor" href="#testing-a-new-java-api-binding"></a>5.2.3. Testing a new Java API binding</h4>
<div class="paragraph">
<p>We recommend that you use Spring&#8217;s REST client testing support, including
<code>MockRestServiceServer</code> to test your API bindings.</p>
</div>
<div class="paragraph">
<p>First create an instance of <code>MockRestServiceServer</code> against the <code>RestTemplate</code>
instance used by your API implementation:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>TwitterTemplate twitter = new TwitterTemplate("consumerKey", "consumerSecret", "accessToken",
    "accessTokenSecret");
MockRestServer mockServer = MockRestServiceServer.createServer(twitter.getRestTemplate());</code></pre>
</div>
</div>
<div class="paragraph">
<p>Then, for each test case, record expectations about how the server
should be invoked and answer what it should respond with:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>@Test
public void getUserProfile() {
    HttpHeaders responseHeaders = new HttpHeaders();
    responseHeaders.setContentType(MediaType.APPLICATION_JSON);

    mockServer.expect(requestTo("https://api.twitter.com/1.1/account/verify_credentials.json"))
              .andExpect(method(GET))
              .andRespond(withSuccess(jsonResource("twitter-profile"), APPLICATION_JSON));

    TwitterProfile profile = twitter.userOperations().getUserProfile();
    assertEquals(161064614, profile.getId());
    assertEquals("jbauer", profile.getScreenName());
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>In the example above the response body is written from a
twitter-profile.json file located in the same package as the test
class:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>private Resource jsonResource(String filename) {
    return new ClassPathResource(filename + ".json", getClass());
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The content of the file should mirror the content the remote service
provider would return, allowing the client JSON deserialization behavior
to be fully tested:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>{
    "id":161064614,
    "screen_name":"jbauer"
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>For complete test examples, consult the source of the existing API
bindings included in Spring Social. The <code>spring-social-twitter</code> and
<code>spring-social-facebook</code> modules provide particularly good references.</p>
</div>
</div>
<div class="sect3">
<h4 id="integrating-an-existing-java-api-binding"><a class="anchor" href="#integrating-an-existing-java-api-binding"></a>5.2.4. Integrating an existing Java API binding</h4>
<div class="paragraph">
<p>If you are adding support for a popular service provider, chances are a
Java binding to the provider&#8217;s API may already exist. For example, the
Twitter4j library has been around for awhile and provides a complete
binding to Twitter&#8217;s API. Instead of developing your own binding, you
may simply wish to integrate what already exists. Spring Social&#8217;s
connect framework has been carefully designed to support this scenario.</p>
</div>
<div class="paragraph">
<p>To integrate an existing API binding, simply note the binding&#8217;s primary
API interface and implementation. For example, in Twitter4j the main API
interface is named "Twitter" and instances are constructed by a
TwitterFactory. You can always construct such an API instance directly,
and you&#8217;ll see in the following sections how to expose an instance as
part of a Connection.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="creating-a-code-serviceprovider-code-model"><a class="anchor" href="#creating-a-code-serviceprovider-code-model"></a>5.3. Creating a <code>ServiceProvider</code> model</h3>
<div class="paragraph">
<p>As described in the previous section, a client binding to a secure API
such as Facebook or Twitter requires valid user authorization
credentials to work. Such credentials are generally obtained by having
your application conduct an authorization "dance" or handshake with the
service provider. Spring Social provides the ServiceProvider&lt;A&gt;
abstraction to handle this "authorization dance". The abstraction also
acts as a factory for native API (A) instances.</p>
</div>
<div class="paragraph">
<p>Since the authorization dance is protocol-specific, a ServiceProvider
specialization exists for each authorization protocol. For example, if
you are connecting to a OAuth2-based provider, you would implement
OAuth2ServiceProvider. After you&#8217;ve done this, your implementation can
be used to conduct the OAuth2 dance and obtain an authorized API
instance. This is typically done in the context of a ConnectionFactory
as part of establishing a new connection to the provider. The following
sections describe the implementation steps for each ServiceProvider
type.</p>
</div>
<div class="sect3">
<h4 id="oauth2"><a class="anchor" href="#oauth2"></a>5.3.1. OAuth2</h4>
<div class="paragraph">
<p>To implement an OAuth2-based ServiceProvider, first create a subclass of
AbstractOAuth2ServiceProvider named {ProviderId}ServiceProvider.
Parameterize &lt;A&gt; to be the Java binding to the ServiceProvider&#8217;s's API.
Define a single constructor that accepts an clientId and clientSecret.
Finally, implement getApi(String) to return a new API instance.</p>
</div>
<div class="paragraph">
<p>See
<code>org.springframework.social.facebook.connect.FacebookServiceProvider</code> as
an example OAuth2ServiceProvider:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public final class FacebookServiceProvider extends AbstractOAuth2ServiceProvider&lt;Facebook&gt; {

    public FacebookServiceProvider(String clientId, String clientSecret) {
        super(new OAuth2Template(clientId, clientSecret,
            "https://graph.facebook.com/oauth/authorize",
            "https://graph.facebook.com/oauth/access_token"));
    }

    public Facebook getApi(String accessToken) {
        return new FacebookTemplate(accessToken);
    }

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>In the constructor, you should call super, passing up the configured
OAuth2Template that implements OAuth2Operations. The OAuth2Template will
handle the "OAuth dance" with the provider, and should be configured
with the provided clientId and clientSecret, along with the
provider-specific authorizeUrl and accessTokenUrl.</p>
</div>
<div class="paragraph">
<p>Some providers support provider sign-in (see <a href="#section_signin">Signing in with Service Provider Accounts</a>) through an
authentication URL that is distinct from the authorization URL. Using
the OAuth2Template constructor as shown above will assume that the
authentication URL is the same as the authorization URL. But you may
specify a different authentication URL by using OAuth2Template&#8217;s other
constructor. Facebook does not have a separate authentication URL, but
for the sake of the example, suppose that Facebook&#8217;s authentication URL
is "https://graph.facebook.com/oauth/authenticate". The following
implementation of the FacebookServiceProvider constructor configures the
OAuth2Template for that case:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public FacebookServiceProvider(String clientId, String clientSecret) {
    super(new OAuth2Template(clientId, clientSecret,
        "https://graph.facebook.com/oauth/authorize",
        "https://graph.facebook.com/oauth/authenticate",
        "https://graph.facebook.com/oauth/access_token"));
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>In getApi(String), you should construct your API implementation, passing
it the access token needed to make authorized requests for protected
resources.</p>
</div>
</div>
<div class="sect3">
<h4 id="oauth1"><a class="anchor" href="#oauth1"></a>5.3.2. OAuth1</h4>
<div class="paragraph">
<p>To implement an OAuth1-based ServiceProvider, first create a subclass of
AbstractOAuth1ServiceProvider named {ProviderId}ServiceProvider.
Parameterize &lt;A&gt; to be the Java binding to the ServiceProvider&#8217;s API.
Define a single constructor that accepts a consumerKey and
consumerSecret. Finally, implement getApi(String, String) to return a
new API instance.</p>
</div>
<div class="paragraph">
<p>See <code>org.springframework.social.twitter.connect.TwitterServiceProvider</code>
as an example OAuth1ServiceProvider:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public final class TwitterServiceProvider extends AbstractOAuth1ServiceProvider&lt;Twitter&gt; {

    public TwitterServiceProvider(String consumerKey, String consumerSecret) {
        super(consumerKey, consumerSecret, new OAuth1Template(consumerKey, consumerSecret,
            "https://twitter.com/oauth/request_token",
            "https://twitter.com/oauth/authorize",
            "https://twitter.com/oauth/authenticate",
            "https://twitter.com/oauth/access_token"));
    }

    public Twitter getApi(String accessToken, String secret) {
        return new TwitterTemplate(getConsumerKey(), getConsumerSecret(), accessToken, secret);
    }

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>In the constructor, you should call super, passing up the the
consumerKey, secret, and configured OAuth1Template. The OAuth1Template
will handle the "OAuth dance" with the provider. It should be configured
with the provided consumerKey and consumerSecret, along with the
provider-specific requestTokenUrl, authorizeUrl, authenticateUrl, and
accessTokenUrl. The authenticateUrl parameter is optional and may be
left out if the provider doesn&#8217;t have an authentication URL that is
different than the authorization URL.</p>
</div>
<div class="paragraph">
<p>As you can see here, OAuth1Template is constructed with Twitter&#8217;s
authentication URL (used for provider sign-in; see <a href="#section_signin">Signing in with Service Provider Accounts</a>), which is distinct
from their authorization URL. Some providers don&#8217;t have separate URLs
for authentication and authorization. In those cases, you can use
OAuth1Template&#8217;s other constructor which doesn&#8217;t take the authentication
URL as a parameter. For example, here&#8217;s how the TwitterServiceProvider
constructor would look without configuring the authentication URL:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public TwitterServiceProvider(String consumerKey, String consumerSecret) {
    super(consumerKey, consumerSecret, new OAuth1Template(consumerKey, consumerSecret,
        "https://twitter.com/oauth/request_token",
        "https://twitter.com/oauth/authorize",
        "https://twitter.com/oauth/access_token"));
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>In getApi(String, String), you should construct your API implementation,
passing it the four tokens needed to make authorized requests for
protected resources.</p>
</div>
<div class="paragraph">
<p>Consult the JavaDoc API of the various service provider types for more
information and subclassing options.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="creating-an-apiadapter"><a class="anchor" href="#creating-an-apiadapter"></a>5.4. Creating an ApiAdapter</h3>
<div class="paragraph">
<p>As discussed in the previous chapter, one of the roles of a Connection
is to provide a common abstraction for a linked user account that is
applied across all service providers. The role of the ApiAdapter is to
map a provider&#8217;s native API interface onto this uniform Connection
model. A connection delegates to its adapter to perform operations such
as testing the validity of its API credentials, setting metadata values,
fetching a user profile, and updating user status:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public interface ApiAdapter&lt;A&gt; {

    boolean test(A api);

    void setConnectionValues(A api, ConnectionValues values);

    UserProfile fetchUserProfile(A api);

    void updateStatus(A api, String message);

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Consider <code>org.springframework.social.twitter.connect.TwitterAdapter</code> as
an example implementation:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public class TwitterAdapter implements ApiAdapter&lt;Twitter&gt; {

    public boolean test(Twitter twitter) {
        try {
            twitter.userOperations().getUserProfile();
            return true;
        } catch (ApiException e) {
            return false;
        }
    }

    public void setConnectionValues(Twitter twitter, ConnectionValues values) {
        TwitterProfile profile = twitter.userOperations().getUserProfile();
        values.setProviderUserId(Long.toString(profile.getId()));
        values.setDisplayName("@" + profile.getScreenName());
        values.setProfileUrl(profile.getProfileUrl());
        values.setImageUrl(profile.getProfileImageUrl());
    }

    public UserProfile fetchUserProfile(Twitter twitter) {
        TwitterProfile profile = twitter.userOperations().getUserProfile();
        return new UserProfileBuilder().setName(profile.getName()).setUsername(
            profile.getScreenName()).build();
    }

    public void updateStatus(Twitter twitter, String message) {
        twitter.timelineOperations().updateStatus(message);
    }

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>As you can see, test(&#8230;) returns true if the API instance is functional
and false if it is not. setConnectionValues(&#8230;) sets the connection&#8217;s
providerUserId, displayName, profileUrl, and imageUrl properties from
TwitterProfile data. fetchUserProfile(&#8230;) maps a TwitterProfile onto
the normalized UserProfile model. updateStatus(&#8230;) update&#8217;s the user&#8217;s
Twitter status. Consult the JavaDoc for ApiAdapter and Connection for
more information and implementation guidance. We also recommend
reviewing the other ApiAdapter implementations for additional examples.</p>
</div>
</div>
<div class="sect2">
<h3 id="creating-a-connectionfactory"><a class="anchor" href="#creating-a-connectionfactory"></a>5.5. Creating a ConnectionFactory</h3>
<div class="paragraph">
<p>By now, you should have an API binding to the provider&#8217;s API, a
ServiceProvider&lt;A&gt; implementation for conducting the "authorization
dance", and an ApiAdapter&lt;A&gt; implementation for mapping onto the uniform
Connection model. The last step in adding support for a new service
provider is to create a ConnectionFactory that wraps up these artifacts
and provides a simple interface for establishing Connections. After this
is done, you may use your connection factory directly, or you may add it
to a registry where it can be used by the framework to establish
connections in a dynamic, self-service manner.</p>
</div>
<div class="paragraph">
<p>Like a ServiceProvider&lt;A&gt;, a ConnectionFactory specialization exists for
each authorization protocol. For example, if you are adding support for
a OAuth2-based provider, you would extend from OAuth2ConnectionFactory.
Implementation guidelines for each type are provided below.</p>
</div>
<div class="sect3">
<h4 id="oauth2-2"><a class="anchor" href="#oauth2-2"></a>5.5.1. OAuth2</h4>
<div class="paragraph">
<p>Create a subclass of OAuth2ConnectionFactory&lt;A&gt; named
{ProviderId}ConnectionFactory and parameterize A to be the Java binding
to the service provider&#8217;s API. Define a single constructor that accepts
a clientId and clientSecret. Within the constructor call super, passing
up the assigned providerId, a new {ProviderId}ServiceProvider instance
configured with the clientId/clientSecret, and a new {Provider}Adapter
instance.</p>
</div>
<div class="paragraph">
<p>See
<code>org.springframework.social.facebook.connect.FacebookConnectionFactory</code>
as an example OAuth2ConnectionFactory:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public class FacebookConnectionFactory extends OAuth2ConnectionFactory&lt;Facebook&gt; {
    public FacebookConnectionFactory(String clientId, String clientSecret) {
        super("facebook", new FacebookServiceProvider(clientId, clientSecret), new FacebookAdapter());
    }
}</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="oauth1-2"><a class="anchor" href="#oauth1-2"></a>5.5.2. OAuth1</h4>
<div class="paragraph">
<p>Create a subclass of OAuth1ConnectionFactory&lt;A&gt; named
{ProviderId}ConnectionFactory and parameterize A to be the Java binding
to the service provider&#8217;s API. Define a single constructor that accepts
a consumerKey and consumerSecret. Within the constructor call super,
passing up the assigned providerId, a new {ProviderId}ServiceProvider
instance configured with the consumerKey/consumerSecret, and a new
{Provider}Adapter instance.</p>
</div>
<div class="paragraph">
<p>See
<code>org.springframework.social.twitter.connect.TwitterConnectionFactory</code> as
an example OAuth1ConnectionFactory:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public class TwitterConnectionFactory extends OAuth1ConnectionFactory&lt;Facebook&gt; {
    public TwitterConnectionFactory(String consumerKey, String consumerSecret) {
        super("twitter", new TwitterServiceProvider(consumerKey, consumerSecret), new TwitterAdapter());
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Consult the source and JavaDoc API for ConnectionFactory and its
subclasses more information, examples, and advanced customization
options.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="section_creatingAProviderProject"><a class="anchor" href="#section_creatingAProviderProject"></a>5.6. Extending an existing Service Provider</h3>
<div class="paragraph">
<p>Are you already using an existing provider like Spring Social GitHub? You may run into the situation where the Spring Social API doesn&#8217;t cover every operation you need. Or you may wish to apply extra behavior like caching certain operations. This section explores extension points Spring Social&#8217;s core includes.</p>
</div>
<div class="sect3">
<h4 id="adding-extra-operations"><a class="anchor" href="#adding-extra-operations"></a>5.6.1. Adding extra operations</h4>
<div class="paragraph">
<p>If you look at the implementation you are using, it probably has a core template, like GitHubTemplate. But what if it doesn&#8217;t have the operation you are looking for? You can either wait for the team to develop it, or write it yourself.</p>
</div>
<div class="paragraph">
<p>To write your own extension, simply extend the core class and add your own implementation:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public class ExtendedGitHubTemplate extends GitHubTemplate {

    public static final String API_URL_BASE = "https://api.github.com";

    public ExtendedGitHubTemplate(String githubToken) {
        super(githubToken);
    }

    public List&lt;GitHubRepo&gt; findAllRepositories(String type, String name) {
        return asList(this.getRestTemplate().getForObject(
                API_URL_BASE + "/{type}/{name}/repos?per_page=100",
                GitHubRepo[].class, type, name));
    }</code></pre>
</div>
</div>
<div class="paragraph">
<p>This fragment extends Spring Social GitHub&#8217;s <code>GitHubTemplate</code>. It adds a new method, <code>findAllRepositories</code>. By extending the core template, you are granted access to an already-connected <code>RestTemplate</code> via <code>getRestTemplate()</code>. You have to assemble the URI yourself, but online documentation from the provider puts the power in your hands.</p>
</div>
</div>
<div class="sect3">
<h4 id="augmenting-spring-social-s-resttemplate"><a class="anchor" href="#augmenting-spring-social-s-resttemplate"></a>5.6.2. Augmenting Spring Social&#8217;s RestTemplate</h4>
<div class="paragraph">
<p>By design, Spring Social uses an embedded <code>RestTemplate</code> to do the legwork of interacting with the provider. That way, if you are using more than one Spring Social project, each one&#8217;s individual instance won&#8217;t collide with other. As a side effect, it may seem hard to apply something like caching. It&#8217;s not.</p>
</div>
<div class="paragraph">
<p>Spring Social&#8217;s <code>AbstractOAuth2ApiBinding</code>, the root of all OAuth2-based provider templates, provides a hook ot post process the <code>RestTemplate</code> when it gets created.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint java language-java"><code>public class ExtendedGitHubTemplate extends GitHubTemplate {

    ...

    @Override
    protected RestTemplate postProcess(RestTemplate restTemplate) {
        AspectJProxyFactory factory = new AspectJProxyFactory(restTemplate);
        factory.addAspect(RestTemplateAspect.class);
        factory.setProxyTargetClass(true);
        return factory.getProxy()
    }</code></pre>
</div>
</div>
<div class="paragraph">
<p>In this example, the code extends <code>GitHubTemplate</code> and then overrides sthe <code>postProcess()</code> method. In Spring Social core, the <strong>restTemplate</strong> is simply passed through during creation and nothing is changed. In this example, the code creates an AspectJ proxy, adds some <code>RestTemplateAspect</code> advice, sets the factory to proxy the class and not its interface, and then returns back a proxy.</p>
</div>
<div class="paragraph">
<p>You can already do things like wrap <code>GitHubTemplate</code> operations with caching. This hook enables you to apply any type of advice directly to the <code>RestTemplate</code>.</p>
</div>
</div>
</div>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnote_1">
<a href="#_footnoteref_1">1</a>. This is just an example. Actual request tokens are typically much longer.
</div>
<div class="footnote" id="_footnote_2">
<a href="#_footnoteref_2">2</a>. If the user has not yet signed into Twitter, the authorization page will also include a username and password field for authentication into Twitter.
</div>
</div>
<div id="footer">
<div id="footer-text">
Version 1.1.4.RELEASE<br>
Last updated 2015-11-24 14:22:33 PST
</div>
</div>
 
<script type="text/javascript">
        var _gaq = _gaq || [];
        var pluginUrl = '//www.google-analytics.com/plugins/ga/inpage_linkid.js';
        _gaq.push(
            ['_require', 'inpage_linkid', pluginUrl],
            ['_setAccount', 'UA-2728886-23'],
            ['_trackPageview'],
            ['b._require', 'inpage_linkid', pluginUrl],
            ['b._setAccount', 'UA-2728886-19'],
            ['b._trackPageview']
        );
        (function() {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        })();
    </script>
 
<script type="text/javascript">

function detectLastFrame() {
   var thisF = this.window;
   var allF = parent.top.frames;
   return allF[allF.length - 1] == thisF; }

// Only inject the following code if this is a normal page or the last // frame of a frameset.
if (parent.top.frames.length == 0 || detectLastFrame()) {
    // Inject the SpringSource search widget too.
    document.write(unescape("%3Cscript src='http://search.spring.io/widget/searchtool.js' type='text/javascript'%3E%3C/script%3E"));
    // Inject the Eloqua code
    //document.write(unescape("%3Cscript src='/elqNow/elqCfg.js' type='text/javascript'%3E%3C/script%3E"));
    //document.write(unescape("%3Cscript src='/elqNow/elqImg.js' type='text/javascript'%3E%3C/script%3E"));

}
</script>
</body>
</html>
